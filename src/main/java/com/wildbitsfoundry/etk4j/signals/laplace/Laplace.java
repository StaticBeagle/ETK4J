package com.wildbitsfoundry.etk4j.signals.laplace;

import com.wildbitsfoundry.etk4j.constants.ConstantsETK;
import com.wildbitsfoundry.etk4j.control.TransferFunction;
import com.wildbitsfoundry.etk4j.math.complex.Complex;
import com.wildbitsfoundry.etk4j.math.functions.ComplexUnivariateFunction;
import com.wildbitsfoundry.etk4j.math.functions.UnivariateFunction;
import com.wildbitsfoundry.etk4j.math.polynomials.RationalFunction;
import com.wildbitsfoundry.etk4j.signals.filters.*;
import com.wildbitsfoundry.etk4j.util.ComplexArrays;

import java.util.ArrayList;
import java.util.Arrays;

public class Laplace {

    public UnivariateFunction FunctionDelegate;
    static double[] V;       //  Stehfest coefficients
    static double ln2;       //  log of 2
    final static int DefaultStehfestN = 16;

    static {
        InitStehfest(DefaultStehfestN);
    }

    public static double Transform(UnivariateFunction F, double s) {
        final int DefaultIntegralN = 5000;
        double du = 0.5 / (double) DefaultIntegralN;
        double y = -F.evaluateAt(0) / 2.0;
        double u = 0;
        double limit = 1.0 - 1e-10;
        while (u < limit) {
            u += du;
            y += 2.0 * Math.pow(u, s - 1) * F.evaluateAt(-Math.log(u));
            u += du;
            y += Math.pow(u, s - 1) * F.evaluateAt(-Math.log(u));
        }
        return 2.0 * y * du / 3.0;
    }

    public static double InverseTransform(UnivariateFunction f, double t) {
        if (t == 0.0) {
            t = ConstantsETK.DOUBLE_EPS;
        } else if (t == -0.0) {
            t = -ConstantsETK.DOUBLE_EPS;
        }
        double ln2t = ln2 / t;
        double x = 0;
        double y = 0;
        for (int i = 0; i < V.length; i++) {
            x += ln2t;
            y += V[i] * f.evaluateAt(x);
        }
        return ln2t * y;
    }

    // http://www.columbia.edu/~ww2040/UnifiedDraft.pdf
    // TODO optimize this. All this coefficients can be calculated before hand
    public static double InverseTransformTalbot(RationalFunction f, double t, int M) {
        if (t == 0.0 || t == -0.0) {
            t = ConstantsETK.DOUBLE_EPS;
        }

        Complex[] delta = ComplexArrays.zeros(M);
        delta[0] = Complex.fromReal(2.0 * M / 5.0);
        for (int k = 1; k < M; ++k) {
            delta[k] = new Complex(1.0 / Math.tan(k * Math.PI / M), 1.0);
            delta[k].multiplyEquals(2.0 * k * Math.PI / 5.0);
        }
        Complex[] gamma = ComplexArrays.zeros(M);
        gamma[0] = delta[0].exp().multiply(0.5);
        for (int k = 1; k < M; ++k) {
            double cotTerm = 1.0 / Math.tan(k * Math.PI / M);
            gamma[k] = new Complex(1.0, (k * Math.PI / M) * (1.0 + cotTerm * cotTerm));
            gamma[k].subtractEquals(Complex.fromImaginary(cotTerm));
            gamma[k].multiplyEquals(delta[k].exp());
        }
        double fb = 0.0;
        for(int k = 0; k < M; ++k) {
            fb += gamma[k].multiply(f.evaluateAt(delta[k].divide(t))).real();
        }
        return 0.4 / t * fb;
    }

    static int MAX_LAP_ORDER = 60;
//    https://www.civil.uwaterloo.ca/jrcraig/pdf/LaplaceInversion.cpp
    public static double InverseTransformDeHoog(ComplexUnivariateFunction f, double t, double tol) {

        int i, n, m, r;
        int M = 40;
        double DeHoogFactor = 4.0;
        double T;
        double gamma;
        Complex h2M, R2M, z, dz, s;
        Complex[] fCtrl = new Complex[2 * MAX_LAP_ORDER  + 1];
        Complex[][] e = new Complex[2 * MAX_LAP_ORDER][];
        Complex[][] q = new Complex[2 * MAX_LAP_ORDER][];
        Complex[] d = new Complex[2 * MAX_LAP_ORDER + 1];
        Complex[] A = new Complex[2 * MAX_LAP_ORDER + 2];
        Complex[] B = new Complex[2 * MAX_LAP_ORDER + 2];

        for(i = 0; i < 2 * MAX_LAP_ORDER; ++i) {
            q[i] = ComplexArrays.zeros(MAX_LAP_ORDER);
            e[i] = ComplexArrays.zeros(MAX_LAP_ORDER);
        }

        T = DeHoogFactor * t;
        if (T == 0.0 || T == -0.0) {
            T = ConstantsETK.DOUBLE_EPS;
        }
        gamma = -0.5 * Math.log(tol) / T;

        fCtrl[0] = f.evaluateAt(Complex.fromReal(gamma)).multiply(0.5);
        for(i = 1; i <= 2 * M; ++i) {
            s = new Complex(gamma, i * Math.PI / T);
            fCtrl[i] = f.evaluateAt(s);
        }

        for(i = 0; i < 2 * M; ++i) {
            q[i][1] = fCtrl[i + 1].divide(fCtrl[i]);
        }

        for (r = 1; r <= M - 1; r++) //one minor correction - does not work for r <= M, as suggested in paper
        {
            for (i = 2 * (M - r); i >= 0; i--)
            {
                if ((i < 2 * (M - r)) && (r > 1)) {
                    q[i][r] = q[i + 1][r - 1].multiply(e[i + 1][r - 1]).divide(e[i][r - 1]);
                }
                e[i][r] = q[i + 1][r].subtract(q[i][r]).add(e[i + 1][r - 1]);
            }
        }

        d[0] = fCtrl[0];
        for (m = 1; m <= M; m++)
        {
            d[2 * m - 1] = q[0][m].uminus();
            d[2 * m] = e[0][m].uminus();
        }

        z = new Complex(Math.cos(Math.PI * t / T), Math.sin(Math.PI * t / T));

        A[0] = new Complex(); B[0] = Complex.fromReal(1.0); //A_{-1},B_{-1} in De Hoog
        A[1] = d[0]; B[1] = Complex.fromReal(1.0);
        for (n = 2; n <= 2 * M + 1; n++)
        {
            dz = d[n - 1].multiply(z);
            A[n] = A[n - 1].add(dz.multiply(A[n - 2]));
            B[n] = B[n - 1].add(dz.multiply(B[n - 2]));
        }
        //Eqn. 23 in De Hoog et al.
        h2M = d[2 * M - 1].subtract(d[2 * M]).multiply(z).add(1).multiply(0.5);
        R2M = z.multiply(d[2 * M].divide(h2M).divide(h2M).add(1.0).sqrt().uminus().add(1.0).multiply(h2M.uminus()));

        //Eqn. 24 in De Hoog et al.
        A[2 * M + 1] = A[2 * M].add(R2M.multiply(A[2 * M - 1]));
        B[2 * M + 1] = B[2 * M].add(R2M.multiply(B[2 * M - 1]));

        //Final result: A[2 * M] /B[2 * M] = sum[F(gamma + itheta) * exp(itheta)]-------------
        return 1.0 / T * Math.exp(gamma * t) * (A[2 * M + 1].divide(B[2 * M + 1])).real();
    }

    public static double Factorial(int N) {
        double x = 1;
        if (N > 1) {
            for (int i = 2; i <= N; i++)
                x = i * x;
        }
        return x;
    }

    //public static double Integrate(FunctionDelegate f, double Min, double Max)
    //{
    //    return Integrate(f, Min, Max, 100);
    //}

    //public static double Integrate(FunctionDelegate f, double XMin, double XMax, int N)
    //{
    //    double dx = (XMax - XMin) / (double)N / 2.0;
    //    double y = (f(XMin) - f(XMax))/2.0;
    //    double x = XMin;
    //    double limit = XMax - 1e-10;
    //    while (x < limit)
    //    {
    //        x += dx;
    //        y += 2.0*f(x);
    //        x += dx;
    //        y += f(x);
    //    }
    //    return 2.0 * y * dx / 3.0;
    //}

    public static void InitStehfest() {
        InitStehfest(DefaultStehfestN);
    }

    public static void InitStehfest(int N) {
        ln2 = Math.log(2.0);
        int N2 = N / 2;
        int NV = 2 * N2;
        V = new double[NV];
        int sign = 1;
        if ((N2 % 2) != 0)
            sign = -1;
        for (int i = 0; i < NV; i++) {
            int kmin = (i + 2) / 2;
            int kmax = i + 1;
            if (kmax > N2)
                kmax = N2;
            V[i] = 0;
            sign = -sign;
            for (int k = kmin; k <= kmax; k++) {
                V[i] = V[i] + (Math.pow(k, N2) / Factorial(k)) * (Factorial(2 * k)
                        / Factorial(2 * k - i - 1)) / Factorial(N2 - k) / Factorial(k - 1)
                        / Factorial(i + 1 - k);
            }
            V[i] = sign * V[i];
        }
    }

    public static void main(String[] args) {
        final double a = 0.333;
        ComplexUnivariateFunction fn = s -> s.sqrt().multiply(-a).exp();
        ArrayList<Double> F = new ArrayList<>();
        for(double t = 0.1; t < 12; t += 0.1) {
            F.add(InverseTransformDeHoog(fn, t, 1e-8));
        }
        System.out.println(F);

        // Specs for low pass filter
        FilterSpecs.LowPassSpecs lpSpecs = new FilterSpecs.LowPassSpecs();
        lpSpecs.setPassBandRipple(1.5); // 1.5 dB gain/ripple refer to note
        lpSpecs.setStopBandAttenuation(60.0); // 60 dB at the stop band
        lpSpecs.setPassBandFrequency(2500); // 2500 Hz cutoff frequency
        lpSpecs.setStopBandFrequency(10000); // 10000 Hz stop band frequency

        FilterOrderResults.OrderAndCutoffFrequency nW0 = ButterWorth.buttord(lpSpecs);
        nW0 = Elliptic.ellipord(lpSpecs);
        TransferFunction el = Elliptic.newLowPass(nW0.getOrder(), lpSpecs.getPassBandRipple(),
                lpSpecs.getStopBandAttenuation(), nW0.getCutoffFrequency());

        double[] time = {0, 0.000124391246294398, 0.000248782492588796, 0.000373173738883193, 0.000497564985177591, 0.000621956231471989, 0.000746347477766387, 0.000870738724060784, 0.000995129970355182, 0.00111952121664958, 0.00124391246294398, 0.00136830370923838, 0.00149269495553277, 0.00161708620182717, 0.00174147744812157, 0.00186586869441597, 0.00199025994071036, 0.00211465118700476, 0.00223904243329916, 0.00236343367959356, 0.00248782492588796, 0.00261221617218235, 0.00273660741847675, 0.00286099866477115, 0.00298538991106555, 0.00310978115735994, 0.00323417240365434, 0.00335856364994874, 0.00348295489624314, 0.00360734614253753, 0.00373173738883193, 0.00385612863512633, 0.00398051988142073, 0.00410491112771513, 0.00422930237400952, 0.00435369362030392, 0.00447808486659832, 0.00460247611289272, 0.00472686735918712, 0.00485125860548151, 0.00497564985177591, 0.00510004109807031, 0.00522443234436471, 0.00534882359065910, 0.00547321483695350, 0.00559760608324790, 0.00572199732954230, 0.00584638857583669, 0.00597077982213109, 0.00609517106842549, 0.00621956231471989, 0.00634395356101429, 0.00646834480730868, 0.00659273605360308, 0.00671712729989748, 0.00684151854619188, 0.00696590979248627, 0.00709030103878067, 0.00721469228507507, 0.00733908353136947, 0.00746347477766387, 0.00758786602395826, 0.00771225727025266, 0.00783664851654706, 0.00796103976284146, 0.00808543100913585, 0.00820982225543025, 0.00833421350172465, 0.00845860474801905, 0.00858299599431345, 0.00870738724060784, 0.00883177848690224, 0.00895616973319664, 0.00908056097949104, 0.00920495222578543, 0.00932934347207983, 0.00945373471837423, 0.00957812596466863, 0.00970251721096303, 0.00982690845725742, 0.00995129970355182, 0.0100756909498462, 0.0102000821961406, 0.0103244734424350, 0.0104488646887294, 0.0105732559350238, 0.0106976471813182, 0.0108220384276126, 0.0109464296739070, 0.0110708209202014, 0.0111952121664958, 0.0113196034127902, 0.0114439946590846, 0.0115683859053790, 0.0116927771516734, 0.0118171683979678, 0.0119415596442622, 0.0120659508905566, 0.0121903421368510, 0.0123147333831454, 0.0124391246294398, 0.0125635158757342, 0.0126879071220286, 0.0128122983683230, 0.0129366896146174, 0.0130610808609118, 0.0131854721072062, 0.0133098633535006, 0.0134342545997950, 0.0135586458460894, 0.0136830370923838, 0.0138074283386782, 0.0139318195849725, 0.0140562108312669, 0.0141806020775613, 0.0143049933238557, 0.0144293845701501, 0.0145537758164445, 0.0146781670627389, 0.0148025583090333, 0.0149269495553277, 0.0150513408016221, 0.0151757320479165, 0.0153001232942109, 0.0154245145405053, 0.0155489057867997, 0.0156732970330941, 0.0157976882793885, 0.0159220795256829, 0.0160464707719773, 0.0161708620182717, 0.0162952532645661, 0.0164196445108605, 0.0165440357571549, 0.0166684270034493, 0.0167928182497437, 0.0169172094960381, 0.0170416007423325, 0.0171659919886269};
        double[] yout = el.step(time).getResponse();
        System.out.println(Arrays.toString(yout));

        // Specs for band pass filter
        FilterSpecs.BandPassSpecs bpSpecs = new FilterSpecs.BandPassSpecs();
        // The bandwidth of the filter starts at the LowerPassBandFrequency and
        // ends at the UpperPassBandFrequency. The filter has lower stop band
        // which is set LowerStopBandFrequency and the upper stop band can be set
        // with UpperStopBandFrequency. The attenuation at the stop bands can be
        // set with the LowerStopBandAttenuation and UpperStopBandAttenuation
        // respectively. In a frequency spectrum, the order of the frequencies will be:
        // LowerStopBandFrequency < LowerPassBandFrequency < UpperPassBandFrequency <
        // UpperStopBandFrequency
        bpSpecs.setLowerPassBandFrequency(190.0); // 190 Hz lower pass band frequency
        bpSpecs.setUpperPassBandFrequency(210.0); // 210 Hz upper pass band frequency
        bpSpecs.setLowerStopBandFrequency(180.0); // 180 Hz lower stop band frequency
        bpSpecs.setUpperStopBandFrequency(220.0); // 220 Hz upper stop band frequency
        bpSpecs.setPassBandRipple(0.2); // 0.2 dB gain/ripple refer to note
        bpSpecs.setStopBandAttenuation(20.0); // 20 dB attenuation in the stop band

        FilterOrderResults.OrderAndCutoffFrequencies nW0W1 = ButterWorth.buttord(bpSpecs);

        nW0W1 = Elliptic.ellipord(bpSpecs);
        TransferFunction elbp = Elliptic.newBandPass(nW0W1.getOrder(), 0.2, 20, nW0W1.getLowerCutoffFrequency(), nW0W1.getUpperCutoffFrequency());

        double[] tbp = {0,0.00148591560235496,0.00297183120470992,0.00445774680706488,0.00594366240941983,0.00742957801177479,0.00891549361412975,0.0104014092164847,0.0118873248188397,0.0133732404211946,0.0148591560235496,0.0163450716259045,0.0178309872282595,0.0193169028306145,0.0208028184329694,0.0222887340353244,0.0237746496376793,0.0252605652400343,0.0267464808423893,0.0282323964447442,0.0297183120470992,0.0312042276494541,0.0326901432518091,0.034176058854164,0.035661974456519,0.037147890058874,0.0386338056612289,0.0401197212635839,0.0416056368659388,0.0430915524682938,0.0445774680706488,0.0460633836730037,0.0475492992753587,0.0490352148777136,0.0505211304800686,0.0520070460824235,0.0534929616847785,0.0549788772871335,0.0564647928894884,0.0579507084918434,0.0594366240941983,0.0609225396965533,0.0624084552989083,0.0638943709012632,0.0653802865036182,0.0668662021059731,0.0683521177083281,0.069838033310683,0.071323948913038,0.072809864515393,0.0742957801177479,0.0757816957201029,0.0772676113224578,0.0787535269248128,0.0802394425271677,0.0817253581295227,0.0832112737318777,0.0846971893342326,0.0861831049365876,0.0876690205389425,0.0891549361412975,0.0906408517436525,0.0921267673460074,0.0936126829483624,0.0950985985507173,0.0965845141530723,0.0980704297554273,0.0995563453577822,0.101042260960137,0.102528176562492,0.104014092164847,0.105500007767202,0.106985923369557,0.108471838971912,0.109957754574267,0.111443670176622,0.112929585778977,0.114415501381332,0.115901416983687,0.117387332586042,0.118873248188397,0.120359163790752,0.121845079393107,0.123330994995462,0.124816910597817,0.126302826200171,0.127788741802526,0.129274657404881,0.130760573007236,0.132246488609591,0.133732404211946,0.135218319814301,0.136704235416656,0.138190151019011,0.139676066621366,0.141161982223721,0.142647897826076,0.144133813428431,0.145619729030786,0.147105644633141,0.148591560235496,0.150077475837851,0.151563391440206,0.153049307042561,0.154535222644916,0.156021138247271,0.157507053849626,0.158992969451981,0.160478885054335,0.16196480065669,0.163450716259045,0.1649366318614,0.166422547463755,0.16790846306611,0.169394378668465,0.17088029427082,0.172366209873175,0.17385212547553,0.175338041077885,0.17682395668024,0.178309872282595,0.17979578788495,0.181281703487305,0.18276761908966,0.184253534692015,0.18573945029437,0.187225365896725,0.18871128149908,0.190197197101435,0.19168311270379,0.193169028306145,0.1946549439085,0.196140859510855,0.197626775113209,0.199112690715564,0.200598606317919,0.202084521920274,0.203570437522629,0.205056353124984,0.206542268727339,0.208028184329694,0.209514099932049,0.211000015534404,0.212485931136759,0.213971846739114,0.215457762341469,0.216943677943824,0.218429593546179,0.219915509148534,0.221401424750889,0.222887340353244,0.224373255955599,0.225859171557954,0.227345087160309,0.228831002762664,0.230316918365019,0.231802833967374,0.233288749569728,0.234774665172083,0.236260580774438,0.237746496376793,0.239232411979148,0.240718327581503,0.242204243183858,0.243690158786213,0.245176074388568,0.246661989990923,0.248147905593278,0.249633821195633,0.251119736797988,0.252605652400343,0.254091568002698,0.255577483605053,0.257063399207408,0.258549314809763,0.260035230412118,0.261521146014473,0.263007061616828,0.264492977219183,0.265978892821538,0.267464808423893,0.268950724026247,0.270436639628602,0.271922555230957,0.273408470833312,0.274894386435667,0.276380302038022,0.277866217640377,0.279352133242732,0.280838048845087,0.282323964447442,0.283809880049797,0.285295795652152,0.286781711254507,0.288267626856862,0.289753542459217,0.291239458061572,0.292725373663927,0.294211289266282,0.295697204868637,0.297183120470992,0.298669036073347,0.300154951675702,0.301640867278057,0.303126782880412,0.304612698482766,0.306098614085121,0.307584529687476,0.309070445289831,0.310556360892186,0.312042276494541,0.313528192096896,0.315014107699251,0.316500023301606,0.317985938903961,0.319471854506316,0.320957770108671,0.322443685711026,0.323929601313381,0.325415516915736,0.326901432518091,0.328387348120446,0.329873263722801,0.331359179325156,0.332845094927511,0.334331010529866,0.335816926132221,0.337302841734576,0.338788757336931,0.340274672939285,0.34176058854164,0.343246504143995,0.34473241974635,0.346218335348705,0.34770425095106,0.349190166553415,0.35067608215577,0.352161997758125,0.35364791336048,0.355133828962835,0.35661974456519,0.358105660167545,0.3595915757699,0.361077491372255,0.36256340697461,0.364049322576965,0.36553523817932,0.367021153781675,0.36850706938403,0.369992984986385,0.37147890058874,0.372964816191095,0.37445073179345,0.375936647395804,0.377422562998159,0.378908478600514,0.380394394202869,0.381880309805224,0.383366225407579,0.384852141009934,0.386338056612289,0.387823972214644,0.389309887816999,0.390795803419354,0.392281719021709,0.393767634624064,0.395253550226419,0.396739465828774,0.398225381431129,0.399711297033484,0.401197212635839,0.402683128238194,0.404169043840549,0.405654959442904,0.407140875045259,0.408626790647614,0.410112706249969,0.411598621852323,0.413084537454678,0.414570453057033,0.416056368659388,0.417542284261743,0.419028199864098,0.420514115466453,0.422000031068808,0.423485946671163,0.424971862273518,0.426457777875873,0.427943693478228,0.429429609080583,0.430915524682938,0.432401440285293,0.433887355887648,0.435373271490003,0.436859187092358,0.438345102694713,0.439831018297068,0.441316933899423,0.442802849501778,0.444288765104133,0.445774680706488,0.447260596308842,0.448746511911197,0.450232427513552,0.451718343115907,0.453204258718262,0.454690174320617,0.456176089922972,0.457662005525327,0.459147921127682,0.460633836730037,0.462119752332392,0.463605667934747,0.465091583537102,0.466577499139457,0.468063414741812,0.469549330344167,0.471035245946522,0.472521161548877,0.474007077151232,0.475492992753587,0.476978908355942,0.478464823958297,0.479950739560652,0.481436655163007,0.482922570765361,0.484408486367716,0.485894401970071,0.487380317572426,0.488866233174781,0.490352148777136,0.491838064379491,0.493323979981846,0.494809895584201,0.496295811186556,0.497781726788911,0.499267642391266,0.500753557993621,0.502239473595976,0.503725389198331,0.505211304800686,0.506697220403041,0.508183136005396,0.509669051607751,0.511154967210106,0.512640882812461,0.514126798414816,0.515612714017171,0.517098629619526,0.51858454522188,0.520070460824235,0.52155637642659,0.523042292028945,0.5245282076313,0.526014123233655,0.52750003883601,0.528985954438365,0.53047187004072,0.531957785643075,0.53344370124543,0.534929616847785,0.53641553245014,0.537901448052495,0.53938736365485,0.540873279257205,0.54235919485956,0.543845110461915,0.54533102606427,0.546816941666625,0.54830285726898,0.549788772871335,0.55127468847369,0.552760604076045,0.554246519678399,0.555732435280754,0.557218350883109,0.558704266485464,0.560190182087819,0.561676097690174,0.563162013292529,0.564647928894884,0.566133844497239,0.567619760099594,0.569105675701949,0.570591591304304,0.572077506906659,0.573563422509014,0.575049338111369,0.576535253713724,0.578021169316079,0.579507084918434,0.580993000520789,0.582478916123144,0.583964831725499,0.585450747327854,0.586936662930209,0.588422578532564,0.589908494134919,0.591394409737273,0.592880325339628,0.594366240941983,0.595852156544338,0.597338072146693,0.598823987749048,0.600309903351403,0.601795818953758,0.603281734556113,0.604767650158468,0.606253565760823,0.607739481363178,0.609225396965533,0.610711312567888,0.612197228170243,0.613683143772598,0.615169059374953,0.616654974977308,0.618140890579663,0.619626806182018,0.621112721784373,0.622598637386728,0.624084552989082,0.625570468591438,0.627056384193793,0.628542299796147,0.630028215398502,0.631514131000857,0.633000046603212,0.634485962205567,0.635971877807922,0.637457793410277,0.638943709012632,0.640429624614987,0.641915540217342,0.643401455819697,0.644887371422052,0.646373287024407,0.647859202626762,0.649345118229117,0.650831033831472,0.652316949433827,0.653802865036182,0.655288780638537,0.656774696240892,0.658260611843247,0.659746527445602,0.661232443047956,0.662718358650311,0.664204274252666,0.665690189855021,0.667176105457376,0.668662021059731,0.670147936662086,0.671633852264441,0.673119767866796,0.674605683469151,0.676091599071506,0.677577514673861,0.679063430276216,0.680549345878571,0.682035261480926,0.683521177083281,0.685007092685636,0.686493008287991,0.687978923890346,0.689464839492701,0.690950755095056,0.692436670697411,0.693922586299766,0.695408501902121,0.696894417504475,0.69838033310683,0.699866248709185,0.70135216431154,0.702838079913895,0.70432399551625,0.705809911118605,0.70729582672096,0.708781742323315,0.71026765792567,0.711753573528025,0.71323948913038,0.714725404732735,0.71621132033509,0.717697235937445,0.7191831515398,0.720669067142155,0.72215498274451,0.723640898346865,0.72512681394922,0.726612729551575,0.72809864515393,0.729584560756285,0.73107047635864,0.732556391960995,0.734042307563349,0.735528223165704,0.737014138768059,0.738500054370414,0.739985969972769,0.741471885575124,0.742957801177479,0.744443716779834,0.745929632382189,0.747415547984544,0.748901463586899,0.750387379189254,0.751873294791609,0.753359210393964,0.754845125996319,0.756331041598674,0.757816957201029,0.759302872803384,0.760788788405739,0.762274704008094,0.763760619610449,0.765246535212804,0.766732450815159,0.768218366417514,0.769704282019869,0.771190197622223,0.772676113224578,0.774162028826933,0.775647944429288,0.777133860031643,0.778619775633998,0.780105691236353,0.781591606838708,0.783077522441063,0.784563438043418,0.786049353645773,0.787535269248128,0.789021184850483,0.790507100452838,0.791993016055193,0.793478931657548,0.794964847259903,0.796450762862258,0.797936678464613,0.799422594066968,0.800908509669323,0.802394425271678,0.803880340874032,0.805366256476387,0.806852172078742,0.808338087681097,0.809824003283452,0.811309918885807,0.812795834488162,0.814281750090517,0.815767665692872,0.817253581295227,0.818739496897582,0.820225412499937,0.821711328102292,0.823197243704647,0.824683159307002,0.826169074909357,0.827654990511712,0.829140906114067,0.830626821716422,0.832112737318777,0.833598652921132,0.835084568523487,0.836570484125842,0.838056399728197,0.839542315330551,0.841028230932906,0.842514146535261,0.844000062137616,0.845485977739971,0.846971893342326,0.848457808944681,0.849943724547036,0.851429640149391,0.852915555751746,0.854401471354101,0.855887386956456,0.857373302558811,0.858859218161166,0.860345133763521,0.861831049365876,0.863316964968231,0.864802880570586,0.866288796172941,0.867774711775296,0.869260627377651,0.870746542980006,0.872232458582361,0.873718374184716,0.875204289787071,0.876690205389425,0.87817612099178,0.879662036594135,0.88114795219649,0.882633867798845,0.8841197834012,0.885605699003555,0.88709161460591,0.888577530208265,0.89006344581062,0.891549361412975,0.89303527701533,0.894521192617685,0.89600710822004,0.897493023822395,0.89897893942475,0.900464855027105,0.90195077062946,0.903436686231815,0.90492260183417,0.906408517436525,0.90789443303888,0.909380348641235,0.91086626424359,0.912352179845945,0.913838095448299,0.915324011050654,0.916809926653009,0.918295842255364,0.919781757857719,0.921267673460074,0.922753589062429,0.924239504664784,0.925725420267139,0.927211335869494,0.928697251471849,0.930183167074204,0.931669082676559,0.933154998278914,0.934640913881269,0.936126829483624,0.937612745085979,0.939098660688334,0.940584576290689,0.942070491893044,0.943556407495399,0.945042323097754,0.946528238700108,0.948014154302463,0.949500069904818,0.950985985507173,0.952471901109528,0.953957816711883,0.955443732314238,0.956929647916593,0.958415563518948,0.959901479121303,0.961387394723658,0.962873310326013,0.964359225928368,0.965845141530723,0.967331057133078,0.968816972735433,0.970302888337788,0.971788803940143,0.973274719542498,0.974760635144853,0.976246550747208,0.977732466349563,0.979218381951918,0.980704297554273,0.982190213156627,0.983676128758982,0.985162044361337,0.986647959963692,0.988133875566047,0.989619791168402,0.991105706770757,0.992591622373112,0.994077537975467,0.995563453577822,0.997049369180177,0.998535284782532,1.00002120038489,1.00150711598724,1.0029930315896,1.00447894719195,1.00596486279431,1.00745077839666,1.00893669399902,1.01042260960137,1.01190852520373,1.01339444080608,1.01488035640844,1.01636627201079,1.01785218761315,1.0193381032155,1.02082401881786,1.02230993442021,1.02379585002257,1.02528176562492,1.02676768122728,1.02825359682963,1.02973951243199,1.03122542803434,1.0327113436367,1.03419725923905,1.03568317484141,1.03716909044376,1.03865500604612,1.04014092164847,1.04162683725083,1.04311275285318,1.04459866845554,1.04608458405789,1.04757049966025,1.0490564152626,1.05054233086496,1.05202824646731,1.05351416206967,1.05500007767202,1.05648599327438,1.05797190887673,1.05945782447909,1.06094374008144,1.0624296556838,1.06391557128615,1.06540148688851,1.06688740249086,1.06837331809322,1.06985923369557,1.07134514929793,1.07283106490028,1.07431698050263,1.07580289610499,1.07728881170734,1.0787747273097,1.08026064291205,1.08174655851441,1.08323247411676,1.08471838971912,1.08620430532147,1.08769022092383,1.08917613652618,1.09066205212854,1.09214796773089,1.09363388333325,1.0951197989356,1.09660571453796,1.09809163014031,1.09957754574267,1.10106346134502,1.10254937694738,1.10403529254973,1.10552120815209,1.10700712375444,1.1084930393568,1.10997895495915,1.11146487056151,1.11295078616386,1.11443670176622,1.11592261736857,1.11740853297093,1.11889444857328,1.12038036417564,1.12186627977799,1.12335219538035,1.1248381109827,1.12632402658506,1.12780994218741,1.12929585778977,1.13078177339212,1.13226768899448,1.13375360459683,1.13523952019919,1.13672543580154,1.1382113514039,1.13969726700625,1.14118318260861,1.14266909821096,1.14415501381332,1.14564092941567,1.14712684501803,1.14861276062038,1.15009867622274,1.15158459182509,1.15307050742745,1.1545564230298,1.15604233863216,1.15752825423451,1.15901416983687,1.16050008543922,1.16198600104158,1.16347191664393,1.16495783224629,1.16644374784864,1.167929663451,1.16941557905335,1.17090149465571,1.17238741025806,1.17387332586042,1.17535924146277,1.17684515706513,1.17833107266748,1.17981698826984,1.18130290387219,1.18278881947455,1.1842747350769,1.18576065067926,1.18724656628161,1.18873248188397,1.19021839748632,1.19170431308868,1.19319022869103,1.19467614429339,1.19616205989574,1.1976479754981,1.19913389110045,1.20061980670281,1.20210572230516,1.20359163790752,1.20507755350987,1.20656346911223,1.20804938471458,1.20953530031694,1.21102121591929,1.21250713152165,1.213993047124,1.21547896272636,1.21696487832871,1.21845079393107,1.21993670953342,1.22142262513578,1.22290854073813,1.22439445634049,1.22588037194284,1.2273662875452,1.22885220314755,1.23033811874991,1.23182403435226,1.23330994995462,1.23479586555697,1.23628178115933,1.23776769676168,1.23925361236404,1.24073952796639,1.24222544356875,1.2437113591711,1.24519727477346,1.24668319037581,1.24816910597816,1.24965502158052,1.25114093718288,1.25262685278523,1.25411276838759,1.25559868398994,1.25708459959229,1.25857051519465,1.260056430797,1.26154234639936,1.26302826200171,1.26451417760407,1.26600009320642,1.26748600880878,1.26897192441113,1.27045784001349,1.27194375561584,1.2734296712182,1.27491558682055,1.27640150242291,1.27788741802526,1.27937333362762,1.28085924922997,1.28234516483233,1.28383108043468,1.28531699603704,1.28680291163939,1.28828882724175,1.2897747428441,1.29126065844646,1.29274657404881,1.29423248965117,1.29571840525352,1.29720432085588,1.29869023645823,1.30017615206059,1.30166206766294,1.3031479832653,1.30463389886765,1.30611981447001,1.30760573007236,1.30909164567472,1.31057756127707,1.31206347687943,1.31354939248178,1.31503530808414,1.31652122368649,1.31800713928885,1.3194930548912,1.32097897049356,1.32246488609591,1.32395080169827,1.32543671730062,1.32692263290298,1.32840854850533,1.32989446410769,1.33138037971004,1.3328662953124,1.33435221091475,1.33583812651711,1.33732404211946,1.33880995772182,1.34029587332417,1.34178178892653,1.34326770452888,1.34475362013124,1.34623953573359,1.34772545133595,1.3492113669383,1.35069728254066,1.35218319814301,1.35366911374537,1.35515502934772,1.35664094495008,1.35812686055243,1.35961277615479,1.36109869175714,1.3625846073595,1.36407052296185,1.36555643856421,1.36704235416656,1.36852826976892,1.37001418537127,1.37150010097363,1.37298601657598,1.37447193217834,1.37595784778069,1.37744376338305,1.3789296789854,1.38041559458776,1.38190151019011,1.38338742579247,1.38487334139482,1.38635925699718,1.38784517259953,1.38933108820189,1.39081700380424,1.3923029194066,1.39378883500895,1.39527475061131,1.39676066621366,1.39824658181602,1.39973249741837,1.40121841302073,1.40270432862308,1.40419024422544,1.40567615982779,1.40716207543015,1.4086479910325,1.41013390663486,1.41161982223721,1.41310573783957,1.41459165344192,1.41607756904428,1.41756348464663,1.41904940024899,1.42053531585134,1.4220212314537,1.42350714705605,1.42499306265841,1.42647897826076,1.42796489386312,1.42945080946547,1.43093672506782,1.43242264067018,1.43390855627253,1.43539447187489,1.43688038747724,1.4383663030796,1.43985221868195,1.44133813428431,1.44282404988666,1.44430996548902,1.44579588109137,1.44728179669373,1.44876771229608,1.45025362789844,1.45173954350079,1.45322545910315,1.4547113747055,1.45619729030786,1.45768320591021,1.45916912151257,1.46065503711492,1.46214095271728,1.46362686831963,1.46511278392199,1.46659869952434,1.4680846151267,1.46957053072905,1.47105644633141,1.47254236193376,1.47402827753612,1.47551419313847,1.47700010874083,1.47848602434318,1.47997193994554,1.48145785554789,1.48294377115025,1.4844296867526,1.48591560235496,1.48740151795731,1.48888743355967,1.49037334916202,1.49185926476438,1.49334518036673,1.49483109596909,1.49631701157144,1.4978029271738,1.49928884277615,1.50077475837851,1.50226067398086,1.50374658958322,1.50523250518557,1.50671842078793,1.50820433639028,1.50969025199264,1.51117616759499,1.51266208319735,1.5141479987997,1.51563391440206,1.51711983000441,1.51860574560677,1.52009166120912,1.52157757681148,1.52306349241383,1.52454940801619,1.52603532361854,1.5275212392209,1.52900715482325,1.53049307042561,1.53197898602796,1.53346490163032,1.53495081723267,1.53643673283503,1.53792264843738,1.53940856403974,1.54089447964209,1.54238039524445,1.5438663108468,1.54535222644916,1.54683814205151,1.54832405765387,1.54980997325622,1.55129588885858,1.55278180446093,1.55426772006329,1.55575363566564,1.557239551268,1.55872546687035,1.56021138247271,1.56169729807506,1.56318321367742,1.56466912927977,1.56615504488213,1.56764096048448,1.56912687608684,1.57061279168919,1.57209870729155,1.5735846228939,1.57507053849626,1.57655645409861,1.57804236970097,1.57952828530332,1.58101420090568,1.58250011650803,1.58398603211039,1.58547194771274,1.5869578633151,1.58844377891745,1.58992969451981,1.59141561012216,1.59290152572452,1.59438744132687,1.59587335692923,1.59735927253158,1.59884518813394,1.60033110373629,1.60181701933865,1.603302934941,1.60478885054336,1.60627476614571,1.60776068174806,1.60924659735042,1.61073251295277,1.61221842855513,1.61370434415748,1.61519025975984,1.61667617536219,1.61816209096455,1.6196480065669,1.62113392216926,1.62261983777161,1.62410575337397,1.62559166897632,1.62707758457868,1.62856350018103,1.63004941578339,1.63153533138574,1.6330212469881,1.63450716259045,1.63599307819281,1.63747899379516,1.63896490939752,1.64045082499987,1.64193674060223,1.64342265620458,1.64490857180694,1.64639448740929,1.64788040301165,1.649366318614,1.65085223421636,1.65233814981871,1.65382406542107,1.65530998102342,1.65679589662578,1.65828181222813,1.65976772783049,1.66125364343284,1.6627395590352,1.66422547463755,1.66571139023991,1.66719730584226,1.66868322144462,1.67016913704697,1.67165505264933,1.67314096825168,1.67462688385404,1.67611279945639,1.67759871505875,1.6790846306611,1.68057054626346,1.68205646186581,1.68354237746817,1.68502829307052,1.68651420867288,1.68800012427523,1.68948603987759,1.69097195547994,1.6924578710823,1.69394378668465,1.69542970228701,1.69691561788936,1.69840153349172,1.69988744909407,1.70137336469643,1.70285928029878,1.70434519590114,1.70583111150349,1.70731702710585,1.7088029427082,1.71028885831056,1.71177477391291,1.71326068951527,1.71474660511762,1.71623252071998,1.71771843632233,1.71920435192469,1.72069026752704,1.7221761831294,1.72366209873175,1.72514801433411,1.72663392993646,1.72811984553882,1.72960576114117,1.73109167674353,1.73257759234588,1.73406350794824,1.73554942355059,1.73703533915295,1.7385212547553,1.74000717035766,1.74149308596001,1.74297900156237,1.74446491716472,1.74595083276708,1.74743674836943,1.74892266397179,1.75040857957414,1.7518944951765,1.75338041077885,1.75486632638121,1.75635224198356,1.75783815758592,1.75932407318827,1.76080998879063,1.76229590439298,1.76378181999534,1.76526773559769,1.76675365120005,1.7682395668024,1.76972548240476,1.77121139800711,1.77269731360947,1.77418322921182,1.77566914481418,1.77715506041653,1.77864097601889,1.78012689162124,1.7816128072236,1.78309872282595,1.78458463842831,1.78607055403066,1.78755646963302,1.78904238523537,1.79052830083772,1.79201421644008,1.79350013204243,1.79498604764479,1.79647196324714,1.7979578788495,1.79944379445185,1.80092971005421,1.80241562565656,1.80390154125892,1.80538745686127,1.80687337246363,1.80835928806598,1.80984520366834,1.81133111927069,1.81281703487305,1.8143029504754,1.81578886607776,1.81727478168011,1.81876069728247,1.82024661288482,1.82173252848718,1.82321844408953,1.82470435969189,1.82619027529424,1.8276761908966,1.82916210649895,1.83064802210131,1.83213393770366,1.83361985330602,1.83510576890837,1.83659168451073,1.83807760011308,1.83956351571544,1.84104943131779,1.84253534692015,1.8440212625225,1.84550717812486,1.84699309372721,1.84847900932957,1.84996492493192,1.85145084053428,1.85293675613663,1.85442267173899,1.85590858734134,1.8573945029437,1.85888041854605,1.86036633414841,1.86185224975076,1.86333816535312,1.86482408095547,1.86630999655783,1.86779591216018,1.86928182776254,1.87076774336489,1.87225365896725,1.8737395745696,1.87522549017196,1.87671140577431,1.87819732137667,1.87968323697902,1.88116915258138,1.88265506818373,1.88414098378609,1.88562689938844,1.8871128149908,1.88859873059315,1.89008464619551,1.89157056179786,1.89305647740022,1.89454239300257,1.89602830860493,1.89751422420728,1.89900013980964,1.90048605541199,1.90197197101435,1.9034578866167,1.90494380221906,1.90642971782141,1.90791563342377,1.90940154902612,1.91088746462848,1.91237338023083,1.91385929583319,1.91534521143554,1.9168311270379,1.91831704264025,1.91980295824261,1.92128887384496,1.92277478944732,1.92426070504967,1.92574662065203,1.92723253625438,1.92871845185674,1.93020436745909};
        yout = elbp.step(tbp).getResponse();
        System.out.println(Arrays.toString(yout));
    }
}
