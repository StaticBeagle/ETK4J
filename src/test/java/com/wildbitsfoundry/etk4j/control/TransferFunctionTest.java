package com.wildbitsfoundry.etk4j.control;

import com.wildbitsfoundry.etk4j.math.complex.Complex;
import com.wildbitsfoundry.etk4j.math.polynomials.Polynomial;
import com.wildbitsfoundry.etk4j.util.NumArrays;
import org.junit.Test;

import java.util.Arrays;

import static org.junit.Assert.*;

public class TransferFunctionTest {

    @Test
    public void testConstructors() {
        TransferFunction tf = new TransferFunction(new double[]{10.0}, new double[]{1.0, 1.0});
        assertEquals(10.0, tf.calculateMagnitudeAt(0.0), 1e-12);
    }

    @Test
    public void testMargins() {
        double[] numerator = {1.0};
        double[] denominator = {1.0, 2.0, 1.0, 0.0};

        TransferFunction tf = new TransferFunction(numerator, denominator);
        Margins margins = tf.calculateMargins();
        assertEquals(1.9999999999999991, margins.getGainMargin(), 1e-12);
        assertEquals(21.386389751875015, margins.getPhaseMargin(), 1e-12);
        assertEquals(0.9999999999999998, margins.getPhaseCrossoverFrequency(), 1e-12);
        assertEquals(0.6823278038280193, margins.getGainCrossoverFrequency(), 1e-12);

        numerator = new double[]{1, 2, 1000.0};
        denominator = new double[]{1.0, 25.0, 100.0, 0.0};

        tf = new TransferFunction(numerator, denominator);
        margins = tf.calculateMargins();
        assertEquals(2.961817321997373, margins.getGainMargin(), 1e-12);
        assertEquals(24.186930185460113, margins.getPhaseMargin(), 1e-12);
        assertEquals(10.291920843263163, margins.getPhaseCrossoverFrequency(), 1e-12);
        assertEquals(5.949128709414389, margins.getGainCrossoverFrequency(), 1e-12);

        numerator = new double[]{1, 1, 2, 1000.0};
        denominator = new double[]{1.0, 25.0, 100.0, 10};

        tf = new TransferFunction(numerator, denominator);
        margins = tf.calculateMargins();
        assertEquals(1.2064017876262465, margins.getGainMargin(), 1e-12);
        assertEquals(10.556579721873817, margins.getPhaseMargin(), 1e-12);
        assertEquals(6.812944126351795, margins.getPhaseCrossoverFrequency(), 1e-12);
        assertEquals(6.060989439604447, margins.getGainCrossoverFrequency(), 1e-12);

        numerator = new double[]{1};
        denominator = new double[]{1.0, 2.0, 1.0};

        tf = new TransferFunction(numerator, denominator);
        margins = tf.calculateMargins();
        assertTrue(Double.isInfinite(margins.getGainMargin()));
        assertTrue(Double.isInfinite(margins.getPhaseMargin()));
        assertTrue(Double.isNaN(margins.getPhaseCrossoverFrequency()));
        assertTrue(Double.isNaN(margins.getGainCrossoverFrequency()));

        numerator = new double[]{7, 14};
        denominator = new double[]{1, 10, 24};

        tf = new TransferFunction(numerator, denominator);
        tf.calculateMargins();
        assertTrue(Double.isInfinite(margins.getGainMargin()));
        assertTrue(Double.isInfinite(margins.getPhaseMargin()));
        assertTrue(Double.isNaN(margins.getPhaseCrossoverFrequency()));
        assertTrue(Double.isNaN(margins.getGainCrossoverFrequency()));
    }

    @Test
    public void testPolesAndZeros() {
        double[] numerator = {1.0};
        double[] denominator = {1.0, 2.0, 1.0, 0.0};

        TransferFunction tf = new TransferFunction(numerator, denominator);

        Complex[] zeros = tf.getZeros();
        Complex[] poles = tf.getPoles();

        assertArrayEquals(new Complex[]{}, zeros);
        assertArrayEquals(new Complex[]{Complex.fromReal(-1.0000000209081399), Complex.fromReal(-0.9999999790918601),
                Complex.fromReal(-4.1910912494273124E-17)}, poles);

        zeros = new Complex[]{Complex.fromReal(-1.0)};
        poles = new Complex[]{Complex.fromReal(-5.0), Complex.fromReal(-1.0), Complex.fromReal(-2.0)};

        tf = new TransferFunction(zeros, poles);

        numerator = tf.getNumerator().getCoefficients();
        denominator = tf.getDenominator().getCoefficients();

        assertArrayEquals(new double[]{10.0, 10.0}, numerator, 1e-12);
        assertArrayEquals(new double[]{1.0, 8.0, 17.0, 10.0}, denominator, 1e-12);

        ZeroPoleGain zpk = new ZeroPoleGain(zeros, poles, 2.0);
        tf = new TransferFunction(zpk);
        tf.normalize();

        assertArrayEquals(zpk.getZeros(), tf.toZeroPoleGain().getZeros());
        assertArrayEquals(zpk.getPoles(), tf.toZeroPoleGain().getPoles());
        assertEquals(zpk.getGain(), tf.toZeroPoleGain().getGain(), 1e-12);
    }

    @Test
    public void testPolesZPKToTF() {
        double[] numerator = {1.0, 2.0};
        double[] denominator = {4.0, 2.0, 1.0, 0.0};

        TransferFunction tf = new TransferFunction(numerator, denominator);

        Complex[] zeros = tf.getZeros();
        Complex[] poles = tf.getPoles();

        ZeroPoleGain zpk = new ZeroPoleGain(zeros, poles, 2.0);
        tf = new TransferFunction(zpk);

        assertArrayEquals(zpk.getZeros(), tf.toZeroPoleGain().getZeros());
        assertArrayEquals(zpk.getPoles(), tf.toZeroPoleGain().getPoles());
        assertEquals(zpk.getGain(), tf.toZeroPoleGain().getGain(), 1e-12);
    }

    @Test
    public void testEvaluation() {
        Complex[] poles = new Complex[]{Complex.fromReal(-1.0), Complex.fromReal(-1.0), Complex.fromReal(-1.0)};

        TransferFunction tf = new TransferFunction(new Polynomial(10.0), new Polynomial(poles));

        double phase = tf.calculateUnwrappedPhaseInDegreesAt(100.0);
        assertEquals(-268.2811839069496, phase, 1e-12);

        double[] frequencies = NumArrays.logSpace(-3, 3, 10);

        double[] magnitudeResponse = {9.999985000018752, 9.999676843499255, 9.993041654128266, 9.851853368415734,
                7.462732134984385, 0.7462732134984399, 0.009851853368415734, 9.993041654128302E-5, 9.999676843499274E-7,
                9.999985000018753E-9};

        double[] phaseResponse = {-0.17188728124350178, -0.7978246216992994, -3.7026276509801344, -17.13177941249893,
                -74.69637093434646, -195.30362906565347, -252.86822058750107, -266.29737234901984, -269.2021753783007,
                -269.8281127187565};

        assertArrayEquals(magnitudeResponse, tf.calculateMagnitudeAt(frequencies), 1e-12);

        double[] systemPhaseResponse = tf.calculatePhaseInDegreesAt(frequencies);
        TransferFunction.unwrapPhase(systemPhaseResponse);
        assertArrayEquals(phaseResponse, systemPhaseResponse, 1e-12);
    }

    @Test
    public void testBode() {
        Complex[] poles = new Complex[]{Complex.fromReal(-1.0), Complex.fromReal(-1.0), Complex.fromReal(-1.0)};
        TransferFunction tf = new TransferFunction(new Polynomial(10.0), new Polynomial(poles));

        double[] frequencies = NumArrays.logSpace(-3, 3, 10);
        double[] magnitudeResponseInDB = {19.99998697117206, 19.99971930529443, 19.993953953801398, 19.870358786520722,
                17.45795706934761, -2.542042930652374, -40.129641213479275, -80.00604604619858, -120.00028069470557,
                -160.00001302882794};


        double[] phaseResponse = {-0.17188728124350178, -0.7978246216992994, -3.7026276509801344, -17.13177941249893,
                -74.69637093434646, -195.30362906565347, -252.86822058750107, -266.29737234901984, -269.2021753783007,
                -269.8281127187565};

        BodeResponse bode = tf.calculateBode(frequencies);

        assertArrayEquals(frequencies, bode.getFrequencies(), 1e-12);
        assertArrayEquals(magnitudeResponseInDB, bode.getMagnitudeIndB(), 1e-12);

        double[] systemPhaseResponse = bode.getPhaseInDegrees();
        assertArrayEquals(phaseResponse, systemPhaseResponse, 1e-12);
    }

    @Test
    public void testBodeWithSelfCalculatedFrequencies() {
        Complex[] poles = new Complex[]{Complex.fromReal(-1.0), Complex.fromReal(-1.0), Complex.fromReal(-1.0)};
        TransferFunction tf = new TransferFunction(new Polynomial(10.0), new Polynomial(poles));

        double[] frequencies = {0.01, 0.010353218432956621, 0.010718913192051276, 0.011097524964120722,
                0.011489510001873092, 0.011895340673703195, 0.012315506032928256, 0.012750512407130129,
                0.01320088400831418, 0.013667163564620066, 0.01414991297434576, 0.014649713983072856,
                0.015167168884709226, 0.015702901247293774, 0.01625755666443794, 0.016831803533309566,
                0.0174263338600965, 0.018041864093920716, 0.01867913599020783, 0.01933891750455231,
                0.020022003718155844, 0.02072921779595371, 0.021461411978584036, 0.02221946860939524,
                0.02300430119772918, 0.023816855519761582, 0.024658110758226028, 0.025529080682395167,
                0.026430814869741057, 0.027364399970746706, 0.02833096101839324, 0.02933166278390044,
                0.030367711180354574, 0.031440354715915, 0.032550885998350584, 0.03370064329271928,
                0.034891012134067735, 0.0361234269970943, 0.03739937302478798, 0.03872038781812555,
                0.04008806328898465, 0.04150404757850477, 0.04297004704320839, 0.04448782831127585,
                0.04605922041145106, 0.04768611697714469, 0.049370478528390035, 0.051114334834401656,
                0.05291978735958442, 0.054789011795939424, 0.05672426068491978, 0.05872786613189483,
                0.06080224261649421, 0.06294988990221888, 0.06517339604882423, 0.06747544053110693, 0.0698587974678525,
                0.07232633896483534, 0.07488103857590023, 0.0775259748862946, 0.08026433522257174, 0.08309941949353396,
                0.086034644166845, 0.0890735463861044, 0.09221978823334327, 0.09547716114208056, 0.09884959046625587,
                0.10234114021054533, 0.10595601792776159, 0.10969857978923835, 0.11357333583431052, 0.11758495540521563,
                0.12173827277396614, 0.12603829296797275, 0.13049019780144022, 0.13509935211980265, 0.1398713102647238,
                0.14481182276745339, 0.14992684327860456, 0.15522253574270473, 0.16070528182616384, 0.16638168860761282,
                0.17225859653987866, 0.17834308769319093, 0.18464249428955434, 0.19116440753857017, 0.19791668678535562,
                0.2049074689815847, 0.21214517849106299, 0.21963853724165458, 0.22739657523579276, 0.23542864143224165,
                0.24374441501222205, 0.2523539170434766, 0.2612675225563328, 0.27049597304631345, 0.2800503894183631,
                0.28994228538828765, 0.3001835813575589, 0.31078661877820124, 0.32176417502507354, 0.3331294787934673,
                0.3448962260405758, 0.35707859649004625, 0.36969127071950264, 0.3827494478516311, 0.3962688638701478,
                0.41026581058271927, 0.42475715525368984, 0.4397603609302719, 0.4552935074866948, 0.4713753134116724,
                0.48802515836544313, 0.505263106533568, 0.5231099308056261, 0.5415871378079471, 0.5607169938205459,
                0.5805225516094898, 0.6010276782070382, 0.6222570836730228, 0.644236350872137, 0.6669919663030122,
                0.6905513520162327, 0.7149428986597577, 0.7401959996915641, 0.7663410868007454, 0.7934096665797492,
                0.8214343584919426, 0.8504489341802677, 0.880488358164346, 0.9115888299750818, 0.9437878277775381,
                0.9771241535346497, 1.011637979766207, 1.0473708979594498, 1.0843659686896097, 1.1226677735108135,
                1.162322468679852, 1.2033778407775892, 1.2458833642950082, 1.289890261253308, 1.3354515629298989,
                1.382622173764655, 1.4314589375234785, 1.4820207057988586, 1.5343684089300116, 1.5885651294280527,
                1.6446761779946628, 1.7027691722258995, 1.762914118095948, 1.8251834943190424, 1.8896523396912097,
                1.9563983435170629, 2.0255019392306663, 2.0970464013232326, 2.171117945694503, 2.247805833548725,
                2.327202478960407, 2.4094035602395243, 2.4945081352303164, 2.5826187606826747, 2.6738416158399465,
                2.7682866303920637, 2.8660676169482504, 2.9673024081888695, 3.072112998861756, 3.180625692794119,
                3.292971255097148, 3.409285069746811, 3.52970730273065, 3.6543830709572545, 3.7834626171319288,
                3.9171014908092565, 4.0554607358408274, 4.19870708444391, 4.347013158125022, 4.500557675700498,
                4.659525668664678, 4.8241087041653685, 4.99450511585514, 5.170920242896756, 5.353566677410725,
                5.542664520663101, 5.738441648302393, 5.941133984965034, 6.150985788580498, 6.3682499447185865,
                6.593188271333542, 6.826071834272386, 7.067181273927491, 7.316807143427193, 7.575250258771913,
                7.842822061337682, 8.119844993184008, 8.406652885618325, 8.703591361485158, 9.01101825166502,
                9.329304026284687, 9.658832241158699, 10.0};

        double[] magnitudeResponseInDB = {19.99869718169412, 19.99860352538672, 19.998503136751403, 19.998395531903576,
                19.9982801921881, 19.998156561682134, 19.998024044518647, 19.997882002018116, 19.997729749614386,
                19.99756655356013, 19.997391627396087, 19.997204128167212, 19.99700315236765, 19.99678773159514,
                19.99655682789414, 19.99630932876544, 19.996044041818482, 19.995759689040913, 19.995454900658125,
                19.995128208553563, 19.994778039218573, 19.994402706198386, 19.994000401998356, 19.993569189412252,
                19.993106992231574, 19.992611585292106, 19.99208058381071, 19.991511431962397, 19.990901390643835,
                19.990247524366183, 19.989546687215796, 19.98879550781741, 19.98799037322984, 19.987127411699383,
                19.986202474191167, 19.985211114613207, 19.984148568642233, 19.98300973105418, 19.981789131455955,
                19.98048090830796, 19.979078781119924, 19.977576020694595, 19.97596541728597, 19.974239246529997,
                19.972389232996804, 19.970406511203777, 19.968281583918998, 19.966004277573973, 19.96356369459348,
                19.960948162439017, 19.958145179150215, 19.955141355156066, 19.951922351115055, 19.948472811529573,
                19.944776293866564, 19.94081519290189, 19.936570659991716, 19.932022516959467, 19.92714916427223,
                19.92192748316571, 19.91633273136242, 19.910338432013404, 19.90391625548035, 19.89703589356193,
                19.88966492575662, 19.8817686771437, 19.87331006745599, 19.864249450911323, 19.854544446366603,
                19.84414975735832, 19.833016981597368, 19.82109440949526, 19.808326811313478, 19.794655212549365,
                19.78001665720136, 19.76434395859503, 19.747565437500405, 19.729604647332312, 19.71038008630024,
                19.689804896464587, 19.667786549764145, 19.644226521207028, 19.619019949566617, 19.59205528609765,
                19.56321393198754, 19.53236986548744, 19.4993892599281, 19.464130094120318, 19.42644175697064,
                19.38616464851171, 19.343129779955422, 19.297158375826072, 19.248061481720832, 19.195639581775353,
                19.13968223048101, 19.079967704104238, 19.01626267759248, 18.94832193350843, 18.875888110204958,
                18.798691497125642, 18.716449885774626, 18.628868485526823, 18.53563991402328, 18.436444272391384,
                18.33094931591735, 18.218810731046513, 18.099672529660214, 17.973167571440392, 17.838918224744372,
                17.696537175735955, 17.545628394516616, 17.38578826564067, 17.216606888652414, 17.037669552133863,
                16.84855838219145, 16.648854163345476, 16.438138326441972, 16.215995094525034, 15.982013773653449,
                15.73579117150384, 15.476934122381085, 15.205062093083166, 14.919809840085957, 14.6208300848808,
                14.307796171176669, 13.98040466523097, 13.638377858949147, 13.281466134726152, 12.909450151394179,
                12.522142812159247, 12.119390978074382, 11.701076894384881, 11.267119301912935, 10.817474211398457,
                10.352135325207858, 9.871134097852218, 9.374539434082418, 8.862457030698742, 8.335028375367656,
                7.7924294224375314, 7.234868971763454, 6.662586781705997, 6.075851451615573, 5.474958112158471,
                4.860225963741523, 4.231995704053524, 3.5906268854176053, 2.936495241330637, 2.269990019375942,
                1.5915113547821547, 0.9014677154200641, 0.20027344514638923, -0.5116535717225391, -1.2338941062459476,
                -1.966029626621073, -2.7076441755200302, -3.458326076428027, -4.2176694658723966, -4.985275651527123,
                -5.760754298873094, -6.543724451381672, -7.333815391067173, -8.130667347739845, -8.933932066409735,
                -9.743273243071771, -10.558366839583877, -11.378901288566128, -12.204577599242013, -13.03510937494951,
                -13.870222752703752, -14.709656274731778, -15.553160701348418, -16.400498773930522, -17.251444936096956,
                -18.10578502053064, -18.963315908207644, -19.823845166134383, -20.6871906690515, -21.553180209949186,
                -22.42165110365642, -23.292449787224427, -24.165431420320292, -25.04045948838361, -25.917405410878096,
                -26.796148156586533, -27.67657386755581, -28.55857549299111, -29.442052434126683, -30.326910200862237,
                -31.213060080742633, -32.100418820678364, -32.98890832164588, -33.8784553464726, -34.76899124069787,
                -35.66045166640447, -36.55277634883541, -37.44590883554614, -38.339796267788095, -39.23438916377859,
                -40.129641213479275};

        double[] phaseResponse = {-1.718816093050458, -1.7795235817110424, -1.842374902827075, -1.9074457291623852,
                -1.9748144007480075, -2.0445620184768942, -2.1167725409367706, -2.1915328845880957, -2.268933027397049,
                -2.349066116036408, -2.4320285767702385, -2.5179202301412147, -2.6068444095824383, -2.6989080840784894,
                -2.7942219850033974, -2.8929007372659994, -2.995062994895931, -3.100831581206125, -3.2103336336701784,
                -3.323700753655352, -3.4410691611540587, -3.5625798546586553, -3.688378776325995, -3.8186169825795515,
                -3.9534508202978262, -4.093042108738414, -4.237558327347004, -4.387172809600172, -4.542064943029647,
                -4.702420375573803, -4.868431228399455, -5.040296315333312, -5.2182213690377335, -5.402419274059515,
                -5.5931103068730605, -5.790522383030562, -5.994891311521215, -6.206461056429043, -6.425484005964382,
                -6.652221248926953, -6.886942858638941, -7.129928184363641, -7.381466150199437, -7.6418555614091135,
                -7.911405418110577, -8.190435236217025, -8.479275375470843, -8.77826737436667, -9.087764291703884,
                -9.408131054446512, -9.739744811499152, -10.082995292929331, -10.438285174079645, -10.806030443915848,
                -11.186660776848372, -11.580619907144706, -11.988366004915678, -12.410372052510562, -12.847126219991425,
                -13.299132238175206, -13.766909767531747, -14.250994761004417, -14.751939818576902, -15.270314531142425,
                -15.806705810938043, -16.361718205486444, -16.935974191636248, -17.530114445909923, -18.144798086952274,
                -18.78070288542085, -19.438525436170444, -20.11898128705627, -20.82280501811136, -21.550750264243835,
                -22.303589673947375, -23.08211479582294, -23.8871358839731, -24.719481612552954, -25.579998688945416,
                -26.469551354179007, -27.389020758325877, -28.339304197716295, -29.321314199889898, -30.33597744128701,
                -31.384233481778466, -32.46703329925753, -33.58533760669474, -34.74011493330973, -35.93233945087442,
                -37.1629885256644, -38.4330399762578, -39.74346901729377, -41.09524486949224, -42.4893270167645,
                -43.92666109217222, -45.40817437588877, -46.934770890255336, -48.50732607958213, -50.12668106559915,
                -51.793636473490324, -53.50894582832509, -55.27330852749813, -57.08736240156074, -58.95167588361544,
                -60.86673981626722, -62.832958934973526, -64.85064307746245, -66.91999818061032, -69.04111713864823,
                -71.21397060960729, -73.43839787026437, -75.71409783318875, -78.04062035243221, -80.4173579564996,
                -82.84353815796995, -85.31821649795884, -87.84027048992463, -90.40839463052824, -93.02109664477537,
                -95.6766951279626, -98.37331873756735, -101.108907073833, -103.88121336823221, -106.68780907426533,
                -109.52609042540331, -112.39328699089856, -115.2864722223863, -118.20257594364193, -121.138398693732,
                -124.09062779143379, -127.05585494768013, -130.03059521441682, -133.01130702412667, -135.99441304575186,
                -138.97632156101355, -141.9534480511076, -144.922236678054, -147.879181347831, -150.82084605373032,
                -153.74388421761077, -156.64505677311317, -159.52124876730412, -162.36948429433318, -165.18693961506386,
                -167.97095435874567, -170.71904074516516, -173.4288908069301, -176.09838163037864, -178.72557866902622,
                -181.30873721464994, -183.84630213751933, -186.3369060285803, -188.77936589250334, -191.17267855153122,
                -193.51601492627742, -195.8087133614636, -198.05027216254246, -200.2403415038074, -202.3787148605427,
                -204.46532010760438, -206.50021041512628, -208.4835550593299, -210.41563025316398, -212.29681008811693,
                -214.12755766536404, -215.90841648172687, -217.64000212392637, -219.32299431347587, -220.95812933437819,
                -222.54619286662293, -224.08801324035036, -225.58445511843848, -227.03641360915498, -228.44480880533678,
                -229.8105807422541, -231.1346847628139, -232.41808727597436, -233.66176189210609, -234.86668591746923,
                -236.0338371888952, -237.16419122911267, -238.2587187028574, -239.31838315390934, -240.3441390034459,
                -241.33692979054126, -242.2976866362406, -243.22732691334954, -244.12675310488262, -244.99685183497263,
                -245.83849305694042, -246.65252938413954, -247.43979555010725, -248.20110798546165, -248.9372644998723,
                -249.6490440582924, -250.3372066414688, -251.00249318153664, -251.64562556425489, -252.26730669015018,
                -252.86822058750107};

        BodeResponse bode = tf.calculateBode();

        assertArrayEquals(frequencies, bode.getFrequencies(), 1e-12);
        assertArrayEquals(magnitudeResponseInDB, bode.getMagnitudeIndB(), 1e-12);
        assertArrayEquals(phaseResponse, bode.getPhaseInDegrees(), 1e-12);
    }

    @Test
    public void testStepResponse() {
        // Test letting step calculate the default times.
        double[] timePoints = {0.0, 0.0707070707070707, 0.1414141414141414, 0.2121212121212121, 0.2828282828282828,
                0.35353535353535354, 0.4242424242424242, 0.4949494949494949, 0.5656565656565656, 0.6363636363636364,
                0.7070707070707071, 0.7777777777777778, 0.8484848484848484, 0.9191919191919191, 0.9898989898989898,
                1.0606060606060606, 1.1313131313131313, 1.202020202020202, 1.2727272727272727, 1.3434343434343434,
                1.4141414141414141, 1.4848484848484849, 1.5555555555555556, 1.6262626262626263, 1.6969696969696968,
                1.7676767676767675, 1.8383838383838382, 1.909090909090909, 1.9797979797979797, 2.0505050505050506,
                2.121212121212121, 2.191919191919192, 2.2626262626262625, 2.333333333333333, 2.404040404040404,
                2.4747474747474745, 2.5454545454545454, 2.616161616161616, 2.686868686868687, 2.7575757575757573,
                2.8282828282828283, 2.898989898989899, 2.9696969696969697, 3.04040404040404, 3.111111111111111,
                3.1818181818181817, 3.2525252525252526, 3.323232323232323, 3.3939393939393936, 3.4646464646464645,
                3.535353535353535, 3.606060606060606, 3.6767676767676765, 3.7474747474747474, 3.818181818181818,
                3.888888888888889, 3.9595959595959593, 4.03030303030303, 4.101010101010101, 4.171717171717171,
                4.242424242424242, 4.313131313131313, 4.383838383838384, 4.454545454545454, 4.525252525252525,
                4.595959595959596, 4.666666666666666, 4.737373737373737, 4.808080808080808, 4.878787878787879,
                4.949494949494949, 5.02020202020202, 5.090909090909091, 5.161616161616162, 5.232323232323232,
                5.303030303030303, 5.373737373737374, 5.444444444444445, 5.515151515151515, 5.585858585858586,
                5.656565656565657, 5.727272727272727, 5.797979797979798, 5.8686868686868685, 5.9393939393939394,
                6.0101010101010095, 6.08080808080808, 6.151515151515151, 6.222222222222222, 6.292929292929292,
                6.363636363636363, 6.434343434343434, 6.505050505050505, 6.575757575757575, 6.646464646464646,
                6.717171717171717, 6.787878787878787, 6.858585858585858, 6.929292929292929, 7.0};

        double[] yOut = {1.0, 1.0706501935709256, 1.140974765048918, 1.210688931991135, 1.2795483108687806,
                1.3473447285119136, 1.4139024171549208, 1.4790745602287427, 1.542740158743866, 1.6048011905907762,
                1.6651800373688195, 1.7238171554557589, 1.780668969963074, 1.8357059719994613, 1.888911001299238,
                1.9402776977747203, 1.9898091069325015, 2.0375164253625098, 2.0834178736746027, 2.1275376853284267,
                2.169905200785859, 2.2105540573184874, 2.2495214656316778, 2.2868475652277396, 2.3225748511289344,
                2.356747665221635, 2.389411746070436, 2.4206138315896917, 2.450401309453764, 2.4788219105798044,
                2.505923441431484, 2.5317535512718585, 2.5563595308412403, 2.5797881392542408, 2.6020854562014053,
                2.62329675680727, 2.643466406740311, 2.6626377753929726, 2.6808531651534517, 2.698153754976823,
                2.7145795566328093, 2.7301693821624227, 2.7449608212170067, 2.758990227082093, 2.7722927103059356,
                2.7849021389595796, 2.7968511446527513, 2.808171133518515, 2.818892301460273, 2.8290436530279752,
                2.838653023356994, 2.8477471026635475, 2.856351462845387, 2.8644905857861644, 2.872187893006914,
                2.879465776348818, 2.886345629408285, 2.892847879478632, 2.8989920197827113, 2.904796641807921,
                2.910279467579388, 2.9154573817291034, 2.920346463238455, 2.9249620167493076, 2.929318603354615,
                2.9334300707937038, 2.937309582990024, 2.940969648880431, 2.9444221504950585, 2.9476783702557783,
                2.9507490174690503, 2.9536442539959573, 2.9563737190882944, 2.9589465533849477, 2.961371422067471,
                2.963656537177827, 2.965809679104774, 2.967838217248403, 2.969749129874896, 2.97154902317578,
                2.9732441495477375, 2.974840425110601, 2.976343446482329, 2.977758506830794, 2.9790906112229294,
                2.980344491292377, 2.9815246192471365, 2.9826352212389913, 2.9836802901165527, 2.9846635975837863,
                2.985588705785755, 2.9864589783431175, 2.987277590856656, 2.9880475409027722, 2.9887716575404877,
                2.98945261035007, 2.9900929180229268, 2.9906949565219074, 2.9912609668306436, 2.99179306231};

        double[] xOut = {1.0, 1.0706501935709256, 1.140974765048918, 1.210688931991135, 1.2795483108687806,
                1.3473447285119136, 1.4139024171549208, 1.4790745602287427, 1.542740158743866, 1.6048011905907762,
                1.6651800373688195, 1.7238171554557589, 1.780668969963074, 1.8357059719994613, 1.888911001299238,
                1.9402776977747203, 1.9898091069325015, 2.0375164253625098, 2.0834178736746027, 2.1275376853284267,
                2.169905200785859, 2.2105540573184874, 2.2495214656316778, 2.2868475652277396, 2.3225748511289344,
                2.356747665221635, 2.389411746070436, 2.4206138315896917, 2.450401309453764, 2.4788219105798044,
                2.505923441431484, 2.5317535512718585, 2.5563595308412403, 2.5797881392542408, 2.6020854562014053,
                2.62329675680727, 2.643466406740311, 2.6626377753929726, 2.6808531651534517, 2.698153754976823,
                2.7145795566328093, 2.7301693821624227, 2.7449608212170067, 2.758990227082093, 2.7722927103059356,
                2.7849021389595796, 2.7968511446527513, 2.808171133518515, 2.818892301460273, 2.8290436530279752,
                2.838653023356994, 2.8477471026635475, 2.856351462845387, 2.8644905857861644, 2.872187893006914,
                2.879465776348818, 2.886345629408285, 2.892847879478632, 2.8989920197827113, 2.904796641807921,
                2.910279467579388, 2.9154573817291034, 2.920346463238455, 2.9249620167493076, 2.929318603354615,
                2.9334300707937038, 2.937309582990024, 2.940969648880431, 2.9444221504950585, 2.9476783702557783,
                2.9507490174690503, 2.9536442539959573, 2.9563737190882944, 2.9589465533849477, 2.961371422067471,
                2.963656537177827, 2.965809679104774, 2.967838217248403, 2.969749129874896, 2.97154902317578,
                2.9732441495477375, 2.974840425110601, 2.976343446482329, 2.977758506830794, 2.9790906112229294,
                2.980344491292377, 2.9815246192471365, 2.9826352212389913, 2.9836802901165527, 2.9846635975837863,
                2.985588705785755, 2.9864589783431175, 2.987277590856656, 2.9880475409027722, 2.9887716575404877,
                2.98945261035007, 2.9900929180229268, 2.9906949565219074, 2.9912609668306436, 2.99179306231};

        TransferFunction tf = new TransferFunction(new double[]{1.0, 3.0, 3.0}, new double[]{1.0, 2.0, 1.0});
        StepResponse sr = tf.step();

        assertArrayEquals(timePoints, sr.getTime(), 1e-12);
        assertArrayEquals(yOut, sr.getResponse(), 1e-12);

        // Test single point
        sr = tf.step(1);

        assertArrayEquals(new double[]{7.0}, sr.getTime(), 1e-12);
        assertArrayEquals(new double[]{1.0}, sr.getResponse(), 1e-12);

        // Test with initial conditions
        yOut = new double[]{6.0, 5.926964828289961, 5.849920761127837, 5.769755488835639, 5.687254187005841,
                5.6031093761207185, 5.517929912766562, 5.432249185059296, 5.346532579030544, 5.261184277318395,
                5.176553446529198, 5.092939865052552, 5.010599038890671, 4.929746849177359, 4.85056377148471,
                4.773198703723482, 4.697772436413435, 4.624380796312477, 4.553097491829138, 4.483976686284269,
                4.417055322918805, 4.3523552235500595, 4.289884980945544, 4.229641663298121, 4.171612347637652,
                4.1157754975914145, 4.0621021995985185, 4.0105572704830825, 3.9611002481887074, 3.9136862764648166,
                3.8682668933667146, 3.82479073257895, 3.7832041457897363, 3.7434517536270944, 3.705476932009875,
                3.669222240164042, 3.6346297960022276, 3.601641604058465, 3.5701998407064206, 3.540247100965029,
                3.5117266108068463, 3.4845824085289063, 3.4587594984206067, 3.434203979665706, 3.4108631531436155,
                3.3886856085467025, 3.367621294003365, 3.3476215701893857, 3.3286392507209426, 3.3106286304500703,
                3.2935455031260292, 3.277347169742595, 3.2619924387606134, 3.2474416192762057, 3.2336565080967112,
                3.220600371587988, 3.208237923067168, 3.1965352964336406, 3.185460016657215, 3.174980967675433,
                3.1650683581912955, 3.155693685807658, 3.146829699884785, 3.13845036346252, 3.130530814547876,
                3.123047327032134, 3.1159772714684295, 3.109299075911021, 3.102992186990586, 3.097037031375822,
                3.091414977750008, 3.086108299411801, 3.0811001375922484, 3.0763744655645087, 3.0719160536089993,
                3.0677104348844386, 3.063743872244362, 3.060003326029075, 3.0564764228545034, 3.053151425411934,
                3.050017203286064, 3.0470632047930857, 3.044279429835511, 3.0416564037661766, 3.0391851522501323,
                3.0368571771099804, 3.0346644331375336, 3.032599305852425, 3.030654590186449, 3.0288234700708836,
                3.027099498902846, 3.025476580865796, 3.0239489530785955, 3.0225111685470485, 3.0211580798915536,
                3.019884823824347, 3.01868680634983, 3.017559688661594, 3.016499373709989, 3.015501993414416};

        sr = tf.step(timePoints, new double[]{1.0, 2.0});
        // We should get back the timePoints we passed in
        assertArrayEquals(timePoints, sr.getTime(), 1e-12);
        assertArrayEquals(yOut, sr.getResponse(), 1e-12);
    }

    @Test
    public void testTimeResponse() {
        double[] timePoints = {0.0, 0.0707070707070707, 0.1414141414141414, 0.2121212121212121, 0.2828282828282828,
                0.35353535353535354, 0.4242424242424242, 0.4949494949494949, 0.5656565656565656, 0.6363636363636364,
                0.7070707070707071, 0.7777777777777778, 0.8484848484848484, 0.9191919191919191, 0.9898989898989898,
                1.0606060606060606, 1.1313131313131313, 1.202020202020202, 1.2727272727272727, 1.3434343434343434,
                1.4141414141414141, 1.4848484848484849, 1.5555555555555556, 1.6262626262626263, 1.6969696969696968,
                1.7676767676767675, 1.8383838383838382, 1.909090909090909, 1.9797979797979797, 2.0505050505050506,
                2.121212121212121, 2.191919191919192, 2.2626262626262625, 2.333333333333333, 2.404040404040404,
                2.4747474747474745, 2.5454545454545454, 2.616161616161616, 2.686868686868687, 2.7575757575757573,
                2.8282828282828283, 2.898989898989899, 2.9696969696969697, 3.04040404040404, 3.111111111111111,
                3.1818181818181817, 3.2525252525252526, 3.323232323232323, 3.3939393939393936, 3.4646464646464645,
                3.535353535353535, 3.606060606060606, 3.6767676767676765, 3.7474747474747474, 3.818181818181818,
                3.888888888888889, 3.9595959595959593, 4.03030303030303, 4.101010101010101, 4.171717171717171,
                4.242424242424242, 4.313131313131313, 4.383838383838384, 4.454545454545454, 4.525252525252525,
                4.595959595959596, 4.666666666666666, 4.737373737373737, 4.808080808080808, 4.878787878787879,
                4.949494949494949, 5.02020202020202, 5.090909090909091, 5.161616161616162, 5.232323232323232,
                5.303030303030303, 5.373737373737374, 5.444444444444445, 5.515151515151515, 5.585858585858586,
                5.656565656565657, 5.727272727272727, 5.797979797979798, 5.8686868686868685, 5.9393939393939394,
                6.0101010101010095, 6.08080808080808, 6.151515151515151, 6.222222222222222, 6.292929292929292,
                6.363636363636363, 6.434343434343434, 6.505050505050505, 6.575757575757575, 6.646464646464646,
                6.717171717171717, 6.787878787878787, 6.858585858585858, 6.929292929292929, 7.0};

        double[] yOut = {1.0, 1.0706501935709256, 1.140974765048918, 1.210688931991135, 1.2795483108687806,
                1.3473447285119136, 1.4139024171549208, 1.4790745602287427, 1.542740158743866, 1.6048011905907762,
                1.6651800373688195, 1.7238171554557589, 1.780668969963074, 1.8357059719994613, 1.888911001299238,
                1.9402776977747203, 1.9898091069325015, 2.0375164253625098, 2.0834178736746027, 2.1275376853284267,
                2.169905200785859, 2.2105540573184874, 2.2495214656316778, 2.2868475652277396, 2.3225748511289344,
                2.356747665221635, 2.389411746070436, 2.4206138315896917, 2.450401309453764, 2.4788219105798044,
                2.505923441431484, 2.5317535512718585, 2.5563595308412403, 2.5797881392542408, 2.6020854562014053,
                2.62329675680727, 2.643466406740311, 2.6626377753929726, 2.6808531651534517, 2.698153754976823,
                2.7145795566328093, 2.7301693821624227, 2.7449608212170067, 2.758990227082093, 2.7722927103059356,
                2.7849021389595796, 2.7968511446527513, 2.808171133518515, 2.818892301460273, 2.8290436530279752,
                2.838653023356994, 2.8477471026635475, 2.856351462845387, 2.8644905857861644, 2.872187893006914,
                2.879465776348818, 2.886345629408285, 2.892847879478632, 2.8989920197827113, 2.904796641807921,
                2.910279467579388, 2.9154573817291034, 2.920346463238455, 2.9249620167493076, 2.929318603354615,
                2.9334300707937038, 2.937309582990024, 2.940969648880431, 2.9444221504950585, 2.9476783702557783,
                2.9507490174690503, 2.9536442539959573, 2.9563737190882944, 2.9589465533849477, 2.961371422067471,
                2.963656537177827, 2.965809679104774, 2.967838217248403, 2.969749129874896, 2.97154902317578,
                2.9732441495477375, 2.974840425110601, 2.976343446482329, 2.977758506830794, 2.9790906112229294,
                2.980344491292377, 2.9815246192471365, 2.9826352212389913, 2.9836802901165527, 2.9846635975837863,
                2.985588705785755, 2.9864589783431175, 2.987277590856656, 2.9880475409027722, 2.9887716575404877,
                2.98945261035007, 2.9900929180229268, 2.9906949565219074, 2.9912609668306436, 2.99179306231};

        double[][] xOut = {
                {
                        0.0, 0.0658802372927001, 0.12276581740242994, 0.17157777364468568, 0.21315330661802717,
                        0.24825293777718033, 0.2775670769978888, 0.30172205080482417, 0.3212856342926908,
                        0.3367721264091228, 0.34864700516486036, 0.35733119647238726, 0.3632049876705734,
                        0.3666116143531105, 0.3678605468671438, 0.36723050077113617, 0.3649721936243862,
                        0.3613108687124959, 0.35644860468209855, 0.35056642855383413, 0.3438262481952057,
                        0.33637261905560045, 0.3283343587861405, 0.31982602227948115, 0.3109492486621279,
                        0.30179399084775776, 0.2924396374083694, 0.28295603573526606, 0.27340442473873555,
                        0.2638382846690755, 0.2543041110279115, 0.24484211897350872, 0.23548688410322646,
                        0.22626792501694573, 0.21721023262400183, 0.20833475074992816, 0.19965881222542425,
                        0.19119653429588468, 0.18295917687323482, 0.17495546686056576, 0.16719189151215996,
                        0.15967296354512095, 0.15240146049227438, 0.14537864057773328, 0.13860443720508037,
                        0.13207763397218572, 0.12579602196502493, 0.11975654093435925, 0.11395540582274719,
                        0.10838821998410941, 0.1030500763230853, 0.09793564747587775, 0.09303926605743365,
                        0.08835499591095157, 0.08387669521421012, 0.07959807222247597, 0.07551273435923819,
                        0.07161423130322324, 0.06789609266261158, 0.06435186077467574, 0.0609751191208013,
                        0.05775951680267348, 0.05469878948498206, 0.05178677717301004, 0.049017439159644814,
                        0.04638486644542565, 0.04388329190697991, 0.04150709846338223, 0.03925082546639474,
                        0.03710917351902635, 0.03507700790721384, 0.0331493608115207, 0.03132143244942642,
                        0.029588591283906195, 0.02794637342045768, 0.026390481302404463, 0.024916781803092716,
                        0.023521303803403573, 0.02220023533374192, 0.02094992035125299, 0.019766855215387902,
                        0.01864768491802142, 0.0175891991180573, 0.016588328024782814, 0.015642138169102163,
                        0.014747828097140758, 0.0139027240165258, 0.013104275421872633, 0.012350050722605012,
                        0.011637732893176309, 0.010965115163008222, 0.010330096760995132, 0.009730678727209403,
                        0.009164959802464095, 0.008631132404621142, 0.008127478698956796, 0.0076523667684937,
                        0.007204246888963588, 0.006781647911962285, 0.006383173758884669
                },
                {
                        0.0, 0.0023849781391127975, 0.00910447382324402, 0.01955557917322463, 0.03319750212537667,
                        0.04954589536736659, 0.068167670078516, 0.08867625471195933, 0.11072726222558762,
                        0.1340145320908267, 0.15826651610197962, 0.18324297949168583, 0.20873199114625032,
                        0.23454717882317538, 0.2605252272160471, 0.28652359850179204, 0.3124184566540576,
                        0.3381027783250069, 0.363484634496252, 0.3884856283872963, 0.4130394762953268,
                        0.43709071913144354, 0.46059355342276864, 0.48351077147412924, 0.5058128012334032,
                        0.5274768371869386, 0.5484860543310333, 0.5688288979272127, 0.5884984423575144,
                        0.6074918129553645, 0.6258096652017862, 0.643455716149175, 0.6604363233690069,
                        0.6767601071186476, 0.6924376117887019, 0.7074810030286708, 0.7219037972574432,
                        0.7357206205485439, 0.7489469941401085, 0.7615991440581285, 0.7736938325603246,
                        0.7852482093086509, 0.7962796803623662, 0.8068057932521798, 0.8168441365504276,
                        0.8264122524936969, 0.8355275613438631, 0.8442072962920779, 0.852468447818763,
                        0.8603277165219329, 0.8678014735169544, 0.8749057275938349, 0.8816560983939767,
                        0.8880677949376066, 0.8941555988963519, 0.899933852063171, 0.9054164475245235,
                        0.9106168240877042, 0.91554796356005, 0.9202223905166227, 0.9246521742292935,
                        0.9288489324632151, 0.9328238368767365, 0.9365876197881489, 0.9401505820974851,
                        0.943522602174139, 0.9467131455415223, 0.9497312752085243, 0.952585662514332,
                        0.955284598368376, 0.9578360047809182, 0.9602474465922184, 0.962526143319434,
                        0.9646789810505206, 0.9667125243235066, 0.9686330279377112, 0.9704464486508406,
                        0.9721584567224995, 0.9737744472705772, 0.9752995514122634, 0.9767386471661749,
                        0.9780963700962897, 0.9793771236821358, 0.9805850894030055, 0.9817242365269138,
                        0.9827983315976181, 0.9838109476153054, 0.9847654729085593, 0.9856651196969737,
                        0.9865129323453051, 0.9873117953113736, 0.988064440791061, 0.9887734560647231,
                        0.989441290550154, 0.9900702625679333, 0.9906625658255568, 0.9912202756272166,
                        0.991745354816472, 0.9922396594593407, 0.9927049442755577
                }
        };

        TransferFunction tf = new TransferFunction(new double[]{1.0, 3.0, 3.0}, new double[]{1.0, 2.0, 1.0});
        SISOTimeResponse SISOtr = tf.simulateTimeResponse(NumArrays.ones(timePoints.length),
                timePoints);

        double[][] transposedStateVector = NumArrays.transpose(SISOtr.getEvolutionOfStateVector());

        assertArrayEquals(timePoints, SISOtr.getTime(), 1e-12);
        assertArrayEquals(yOut, SISOtr.getResponse(), 1e-12);
        assertArrayEquals(xOut[0], transposedStateVector[0], 1e-12);
        assertArrayEquals(xOut[1], transposedStateVector[1], 1e-12);

        // TODO test with inital conditions
    }

    @Test
    public void testGetNumeratorCoefficients() {
        double[] num = {1};
        double[] den = {1, 1};
        TransferFunction tf = new TransferFunction(num, den);

        double[] numCoefficients = tf.getNumeratorCoefficients();
        double[] denCoefficients = tf.getDenominatorCoefficients();

        assertArrayEquals(new double[]{0, 1}, numCoefficients, 1e-12);
        assertArrayEquals(den, denCoefficients, 1e-12);

        num = new double[]{1};
        den = new double[]{1, 1, 1};
        tf = new TransferFunction(num, den);

        numCoefficients = tf.getNumeratorCoefficients();
        denCoefficients = tf.getDenominatorCoefficients();

        assertArrayEquals(new double[]{0, 0, 1}, numCoefficients, 1e-12);
        assertArrayEquals(den, denCoefficients, 1e-12);

        num = new double[]{1, 1, 1};
        den = new double[]{1, 1, 1};
        tf = new TransferFunction(num, den);

        numCoefficients = tf.getNumeratorCoefficients();
        denCoefficients = tf.getDenominatorCoefficients();

        assertArrayEquals(num, numCoefficients, 1e-12);
        assertArrayEquals(den, denCoefficients, 1e-12);

        num = new double[]{1, 1, 1};
        den = new double[]{1};
        tf = new TransferFunction(num, den);

        numCoefficients = tf.getNumeratorCoefficients();
        denCoefficients = tf.getDenominatorCoefficients();

        assertArrayEquals(num, numCoefficients, 1e-12);
        assertArrayEquals(new double[]{0, 0, 1}, denCoefficients, 1e-12);

        num = new double[]{1, 1};
        den = new double[]{1};
        tf = new TransferFunction(num, den);

        numCoefficients = tf.getNumeratorCoefficients();
        denCoefficients = tf.getDenominatorCoefficients();

        assertArrayEquals(num, numCoefficients, 1e-12);
        assertArrayEquals(new double[]{0, 1}, denCoefficients, 1e-12);
    }
}