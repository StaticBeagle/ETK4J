package com.wildbitsfoundry.etk4j.control;

import com.wildbitsfoundry.etk4j.math.complex.Complex;
import com.wildbitsfoundry.etk4j.util.NumArrays;
import org.junit.Test;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

public class TransferFunctionTest {

	@Test
	public void testConstructors() {
		TransferFunction tf = new TransferFunction(new double[] { 10.0 }, new double[] { 1.0, 1.0 });
		assertEquals(10.0, tf.getMagnitudeAt(0.0), 1e-12);

	}

	@Test
	public void testMargins() {
		double[] numerator = { 1.0 };
		double[] denominator = { 1.0, 2.0, 1.0, 0.0 };

		TransferFunction tf = new TransferFunction(numerator, denominator);
		Margins margins = tf.getMargins();

		assertEquals(0.6823278038280193, margins.getGainCrossOverFrequency(), 1e-12);
		assertEquals(21.386389751875015, margins.getPhaseMargin(), 1e-12);
		assertEquals(0.9999999999999998, margins.getPhaseCrossOverFrequency(), 1e-12);
		assertEquals(6.02059991327962, margins.getGainMargin(), 1e-12);
		assertEquals(
				"Margins [GainMargin=6.02059991327962, PhaseMargin=21.386389751875015,"
						+ " GainCrossOverFrequency=0.6823278038280193, PhaseCrossOverFrequency=0.9999999999999998]",
				margins.toString());
	}

	@Test
	public void testPolesAndZeros() {
		double[] numerator = { 1.0 };
		double[] denominator = { 1.0, 2.0, 1.0, 0.0 };

		TransferFunction tf = new TransferFunction(numerator, denominator);

		Complex[] zeros = tf.getZeros();
		Complex[] poles = tf.getPoles();

		assertArrayEquals(new Complex[] {}, zeros);
		assertArrayEquals(new Complex[] { Complex.fromReal(-1.0000000209081399), Complex.fromReal(-0.9999999790918601),
				Complex.fromReal(-4.1910912494273124E-17) }, poles);

		zeros = new Complex[] { Complex.fromReal(-1.0) };
		poles = new Complex[] { Complex.fromReal(-5.0), Complex.fromReal(-1.0), Complex.fromReal(-2.0) };

		tf = new TransferFunction(zeros, poles);

		numerator = tf.getNumerator().getCoefficients();
		denominator = tf.getDenominator().getCoefficients();

		assertArrayEquals(new double[] { 10.0, 10.0 }, numerator, 1e-12);
		assertArrayEquals(new double[] { 1.0, 8.0, 17.0, 10.0 }, denominator, 1e-12);

		ZeroPoleGain zpk = new ZeroPoleGain(zeros, poles, 2.0);
		tf = new TransferFunction(zpk);
		tf.normalize();

		assertArrayEquals(zpk.getZeros(), tf.toZeroPoleGain().getZeros());
		assertArrayEquals(zpk.getPoles(), tf.toZeroPoleGain().getPoles());
		assertEquals(zpk.getGain(), tf.toZeroPoleGain().getGain(), 1e-12);
	}

	@Test
	public void testPolesZPKToTf() {
		double[] numerator = { 1.0, 2.0 };
		double[] denominator = { 4.0, 2.0, 1.0, 0.0 };

		TransferFunction tf = new TransferFunction(numerator, denominator);

		Complex[] zeros = tf.getZeros();
		Complex[] poles = tf.getPoles();

		ZeroPoleGain zpk = new ZeroPoleGain(zeros, poles, 2.0);
		tf = new TransferFunction(zpk);

		assertArrayEquals(zpk.getZeros(), tf.toZeroPoleGain().getZeros());
		assertArrayEquals(zpk.getPoles(), tf.toZeroPoleGain().getPoles());
		assertEquals(zpk.getGain(), tf.toZeroPoleGain().getGain(), 1e-12);
	}

	@Test
	public void testGettersAndEvaluation() {
		Complex[] poles = new Complex[] { Complex.fromReal(-1.0), Complex.fromReal(-1.0), Complex.fromReal(-1.0) };

		TransferFunction tf = new TransferFunction(10.0, poles);

		double phase = tf.getPhaseAt(100.0);
		assertEquals(-268.2811839069496, phase, 1e-12);

		double[] frequencies = NumArrays.logSpace(-3, 3, 10);

		double[] magnitudeResponse = { 9.999985000018752, 9.999676843499255, 9.993041654128266, 9.851853368415734,
				7.462732134984385, 0.7462732134984399, 0.009851853368415734, 9.993041654128302E-5, 9.999676843499274E-7,
				9.999985000018753E-9 };

		double[] phaseResponse = { -0.17188728124350178, -0.7978246216992994, -3.7026276509801344, -17.13177941249893,
				-74.69637093434646, -195.30362906565347, -252.86822058750107, -266.29737234901984, -269.2021753783007,
				-269.8281127187565 };
		
		assertArrayEquals(magnitudeResponse, tf.getMagnitudeAt(frequencies), 1e-12);
		assertArrayEquals(phaseResponse, tf.getPhaseAt(frequencies), 1e-12);
	}

	@Test
	public void testStepResponse() {
		double[] timePoints = {0.0, 0.0707070707070707, 0.1414141414141414, 0.2121212121212121, 0.2828282828282828,
				0.35353535353535354, 0.4242424242424242, 0.4949494949494949, 0.5656565656565656, 0.6363636363636364,
				0.7070707070707071, 0.7777777777777778, 0.8484848484848484, 0.9191919191919191, 0.9898989898989898,
				1.0606060606060606, 1.1313131313131313, 1.202020202020202, 1.2727272727272727, 1.3434343434343434,
				1.4141414141414141, 1.4848484848484849, 1.5555555555555556, 1.6262626262626263, 1.6969696969696968,
				1.7676767676767675, 1.8383838383838382, 1.909090909090909, 1.9797979797979797, 2.0505050505050506,
				2.121212121212121, 2.191919191919192, 2.2626262626262625, 2.333333333333333, 2.404040404040404,
				2.4747474747474745, 2.5454545454545454, 2.616161616161616, 2.686868686868687, 2.7575757575757573,
				2.8282828282828283, 2.898989898989899, 2.9696969696969697, 3.04040404040404, 3.111111111111111,
				3.1818181818181817, 3.2525252525252526, 3.323232323232323, 3.3939393939393936, 3.4646464646464645,
				3.535353535353535, 3.606060606060606, 3.6767676767676765, 3.7474747474747474, 3.818181818181818,
				3.888888888888889, 3.9595959595959593, 4.03030303030303, 4.101010101010101, 4.171717171717171,
				4.242424242424242, 4.313131313131313, 4.383838383838384, 4.454545454545454, 4.525252525252525,
				4.595959595959596, 4.666666666666666, 4.737373737373737, 4.808080808080808, 4.878787878787879,
				4.949494949494949, 5.02020202020202, 5.090909090909091, 5.161616161616162, 5.232323232323232,
				5.303030303030303, 5.373737373737374, 5.444444444444445, 5.515151515151515, 5.585858585858586,
				5.656565656565657, 5.727272727272727, 5.797979797979798, 5.8686868686868685, 5.9393939393939394,
				6.0101010101010095, 6.08080808080808, 6.151515151515151, 6.222222222222222, 6.292929292929292,
				6.363636363636363, 6.434343434343434, 6.505050505050505, 6.575757575757575, 6.646464646464646,
				6.717171717171717, 6.787878787878787, 6.858585858585858, 6.929292929292929, 7.0};

		double[] yOut = {1.0, 1.0706501935709256, 1.140974765048918, 1.210688931991135, 1.2795483108687806,
				1.3473447285119136, 1.4139024171549208, 1.4790745602287427, 1.542740158743866, 1.6048011905907762,
				1.6651800373688195, 1.7238171554557589, 1.780668969963074, 1.8357059719994613, 1.888911001299238,
				1.9402776977747203, 1.9898091069325015, 2.0375164253625098, 2.0834178736746027, 2.1275376853284267,
				2.169905200785859, 2.2105540573184874, 2.2495214656316778, 2.2868475652277396, 2.3225748511289344,
				2.356747665221635, 2.389411746070436, 2.4206138315896917, 2.450401309453764, 2.4788219105798044,
				2.505923441431484, 2.5317535512718585, 2.5563595308412403, 2.5797881392542408, 2.6020854562014053,
				2.62329675680727, 2.643466406740311, 2.6626377753929726, 2.6808531651534517, 2.698153754976823,
				2.7145795566328093, 2.7301693821624227, 2.7449608212170067, 2.758990227082093, 2.7722927103059356,
				2.7849021389595796, 2.7968511446527513, 2.808171133518515, 2.818892301460273, 2.8290436530279752,
				2.838653023356994, 2.8477471026635475, 2.856351462845387, 2.8644905857861644, 2.872187893006914,
				2.879465776348818, 2.886345629408285, 2.892847879478632, 2.8989920197827113, 2.904796641807921,
				2.910279467579388, 2.9154573817291034, 2.920346463238455, 2.9249620167493076, 2.929318603354615,
				2.9334300707937038, 2.937309582990024, 2.940969648880431, 2.9444221504950585, 2.9476783702557783,
				2.9507490174690503, 2.9536442539959573, 2.9563737190882944, 2.9589465533849477, 2.961371422067471,
				2.963656537177827, 2.965809679104774, 2.967838217248403, 2.969749129874896, 2.97154902317578,
				2.9732441495477375, 2.974840425110601, 2.976343446482329, 2.977758506830794, 2.9790906112229294,
				2.980344491292377, 2.9815246192471365, 2.9826352212389913, 2.9836802901165527, 2.9846635975837863,
				2.985588705785755, 2.9864589783431175, 2.987277590856656, 2.9880475409027722, 2.9887716575404877,
				2.98945261035007, 2.9900929180229268, 2.9906949565219074, 2.9912609668306436, 2.99179306231};

		TransferFunction tf = new TransferFunction(new double[] {1.0, 3.0, 3.0}, new double[] {1.0, 2.0, 1.0});
		StepResponse sr = tf.step(timePoints);

		assertArrayEquals(timePoints, sr.getTime(), 1e-12);
		assertArrayEquals(yOut, sr.getResponse(), 1e-12);
	}
}
