package com.wildbitsfoundry.etk4j.control;

import com.wildbitsfoundry.etk4j.math.complex.Complex;
import com.wildbitsfoundry.etk4j.math.linearalgebra.Matrix;
import com.wildbitsfoundry.etk4j.util.NumArrays;
import org.junit.Test;

import java.lang.reflect.Array;
import java.util.Arrays;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

public class StateSpaceTest {

    @Test
    public void testStepResponse() {
        // Test letting step calculate the default times.
        double[] timePoints = {0.0, 0.0707070707070707, 0.1414141414141414, 0.2121212121212121, 0.2828282828282828,
                0.35353535353535354, 0.4242424242424242, 0.4949494949494949, 0.5656565656565656, 0.6363636363636364,
                0.7070707070707071, 0.7777777777777778, 0.8484848484848484, 0.9191919191919191, 0.9898989898989898,
                1.0606060606060606, 1.1313131313131313, 1.202020202020202, 1.2727272727272727, 1.3434343434343434,
                1.4141414141414141, 1.4848484848484849, 1.5555555555555556, 1.6262626262626263, 1.6969696969696968,
                1.7676767676767675, 1.8383838383838382, 1.909090909090909, 1.9797979797979797, 2.0505050505050506,
                2.121212121212121, 2.191919191919192, 2.2626262626262625, 2.333333333333333, 2.404040404040404,
                2.4747474747474745, 2.5454545454545454, 2.616161616161616, 2.686868686868687, 2.7575757575757573,
                2.8282828282828283, 2.898989898989899, 2.9696969696969697, 3.04040404040404, 3.111111111111111,
                3.1818181818181817, 3.2525252525252526, 3.323232323232323, 3.3939393939393936, 3.4646464646464645,
                3.535353535353535, 3.606060606060606, 3.6767676767676765, 3.7474747474747474, 3.818181818181818,
                3.888888888888889, 3.9595959595959593, 4.03030303030303, 4.101010101010101, 4.171717171717171,
                4.242424242424242, 4.313131313131313, 4.383838383838384, 4.454545454545454, 4.525252525252525,
                4.595959595959596, 4.666666666666666, 4.737373737373737, 4.808080808080808, 4.878787878787879,
                4.949494949494949, 5.02020202020202, 5.090909090909091, 5.161616161616162, 5.232323232323232,
                5.303030303030303, 5.373737373737374, 5.444444444444445, 5.515151515151515, 5.585858585858586,
                5.656565656565657, 5.727272727272727, 5.797979797979798, 5.8686868686868685, 5.9393939393939394,
                6.0101010101010095, 6.08080808080808, 6.151515151515151, 6.222222222222222, 6.292929292929292,
                6.363636363636363, 6.434343434343434, 6.505050505050505, 6.575757575757575, 6.646464646464646,
                6.717171717171717, 6.787878787878787, 6.858585858585858, 6.929292929292929, 7.0};

        double[] yOut = {1.0, 1.0706501935709256, 1.140974765048918, 1.210688931991135, 1.2795483108687806,
                1.3473447285119136, 1.4139024171549208, 1.4790745602287427, 1.542740158743866, 1.6048011905907762,
                1.6651800373688195, 1.7238171554557589, 1.780668969963074, 1.8357059719994613, 1.888911001299238,
                1.9402776977747203, 1.9898091069325015, 2.0375164253625098, 2.0834178736746027, 2.1275376853284267,
                2.169905200785859, 2.2105540573184874, 2.2495214656316778, 2.2868475652277396, 2.3225748511289344,
                2.356747665221635, 2.389411746070436, 2.4206138315896917, 2.450401309453764, 2.4788219105798044,
                2.505923441431484, 2.5317535512718585, 2.5563595308412403, 2.5797881392542408, 2.6020854562014053,
                2.62329675680727, 2.643466406740311, 2.6626377753929726, 2.6808531651534517, 2.698153754976823,
                2.7145795566328093, 2.7301693821624227, 2.7449608212170067, 2.758990227082093, 2.7722927103059356,
                2.7849021389595796, 2.7968511446527513, 2.808171133518515, 2.818892301460273, 2.8290436530279752,
                2.838653023356994, 2.8477471026635475, 2.856351462845387, 2.8644905857861644, 2.872187893006914,
                2.879465776348818, 2.886345629408285, 2.892847879478632, 2.8989920197827113, 2.904796641807921,
                2.910279467579388, 2.9154573817291034, 2.920346463238455, 2.9249620167493076, 2.929318603354615,
                2.9334300707937038, 2.937309582990024, 2.940969648880431, 2.9444221504950585, 2.9476783702557783,
                2.9507490174690503, 2.9536442539959573, 2.9563737190882944, 2.9589465533849477, 2.961371422067471,
                2.963656537177827, 2.965809679104774, 2.967838217248403, 2.969749129874896, 2.97154902317578,
                2.9732441495477375, 2.974840425110601, 2.976343446482329, 2.977758506830794, 2.9790906112229294,
                2.980344491292377, 2.9815246192471365, 2.9826352212389913, 2.9836802901165527, 2.9846635975837863,
                2.985588705785755, 2.9864589783431175, 2.987277590856656, 2.9880475409027722, 2.9887716575404877,
                2.98945261035007, 2.9900929180229268, 2.9906949565219074, 2.9912609668306436, 2.99179306231};

        Matrix A = new Matrix(new double[][]{
                {-2.0, -1.0},
                {1.0, 0.0}
        });
        Matrix B = new Matrix(new double[][]{
                {1.0},
                {0.0}
        });
        Matrix C = new Matrix(new double[][]{
                {1.0, 2.0}
        });
        Matrix D = new Matrix(new double[][]{
                {1.0}
        });

        StateSpace ss = new StateSpace(A, B, C, D);
        StepResponse sr = ss.step();

        assertArrayEquals(timePoints, sr.getTime(), 1e-12);
        assertArrayEquals(yOut, sr.getResponse(), 1e-12);
    }

    @Test
    public void testStepResponseWithInitialConditions() {
        // Test letting step calculate the default times.
        double[] timePoints = {0.0, 0.0707070707070707, 0.1414141414141414, 0.2121212121212121, 0.2828282828282828,
                0.35353535353535354, 0.4242424242424242, 0.4949494949494949, 0.5656565656565656, 0.6363636363636364,
                0.7070707070707071, 0.7777777777777778, 0.8484848484848484, 0.9191919191919191, 0.9898989898989898,
                1.0606060606060606, 1.1313131313131313, 1.202020202020202, 1.2727272727272727, 1.3434343434343434,
                1.4141414141414141, 1.4848484848484849, 1.5555555555555556, 1.6262626262626263, 1.6969696969696968,
                1.7676767676767675, 1.8383838383838382, 1.909090909090909, 1.9797979797979797, 2.0505050505050506,
                2.121212121212121, 2.191919191919192, 2.2626262626262625, 2.333333333333333, 2.404040404040404,
                2.4747474747474745, 2.5454545454545454, 2.616161616161616, 2.686868686868687, 2.7575757575757573,
                2.8282828282828283, 2.898989898989899, 2.9696969696969697, 3.04040404040404, 3.111111111111111,
                3.1818181818181817, 3.2525252525252526, 3.323232323232323, 3.3939393939393936, 3.4646464646464645,
                3.535353535353535, 3.606060606060606, 3.6767676767676765, 3.7474747474747474, 3.818181818181818,
                3.888888888888889, 3.9595959595959593, 4.03030303030303, 4.101010101010101, 4.171717171717171,
                4.242424242424242, 4.313131313131313, 4.383838383838384, 4.454545454545454, 4.525252525252525,
                4.595959595959596, 4.666666666666666, 4.737373737373737, 4.808080808080808, 4.878787878787879,
                4.949494949494949, 5.02020202020202, 5.090909090909091, 5.161616161616162, 5.232323232323232,
                5.303030303030303, 5.373737373737374, 5.444444444444445, 5.515151515151515, 5.585858585858586,
                5.656565656565657, 5.727272727272727, 5.797979797979798, 5.8686868686868685, 5.9393939393939394,
                6.0101010101010095, 6.08080808080808, 6.151515151515151, 6.222222222222222, 6.292929292929292,
                6.363636363636363, 6.434343434343434, 6.505050505050505, 6.575757575757575, 6.646464646464646,
                6.717171717171717, 6.787878787878787, 6.858585858585858, 6.929292929292929, 7.0};

        double[] yOut = {4.0, 3.9976150218608866, 3.990895526176755, 3.980444420826774, 3.966802497874622,
                3.9504541046326316, 3.9318323299214812, 3.9113237452880374, 3.8892727377744087, 3.8659854679091694,
                3.8417334838980164, 3.8167570205083097, 3.7912680088537445, 3.765452821176819, 3.7394747727839466,
                3.713476401498201, 3.6875815433459356, 3.6618972216749857, 3.6365153655037403, 3.6115143716126954,
                3.586960523704665, 3.562909280868548, 3.5394064465772224, 3.5164892285258613, 3.4941871987665873,
                3.4725231628130517, 3.4515139456689568, 3.431171102072777, 3.4115015576424748, 3.392508187044624,
                3.3741903347982025, 3.356544283850813, 3.339563676630981, 3.3232398928813405, 3.307562388211286,
                3.292518996971317, 3.278096202742544, 3.2642793794514438, 3.251053005859879, 3.2384008559418587,
                3.2263061674396623, 3.214751790691336, 3.2037203196376205, 3.1931942067478065, 3.1831558634495587,
                3.1735877475062892, 3.164472438656123, 3.155792703707908, 3.147531552181223, 3.1396722834780526,
                3.132198526483031, 3.125094272406151, 3.118343901606009, 3.1119322050623794, 3.1058444011036337,
                3.100066147936815, 3.0945835524754624, 3.0893831759122814, 3.0844520364399357, 3.079777609483363,
                3.075347825770692, 3.07115106753677, 3.0671761631232486, 3.0634123802118363, 3.0598494179025,
                3.056477397825846, 3.053286854458463, 3.0502687247914606, 3.047414337485653, 3.0447154016316094,
                3.042163995219067, 3.0397525534077667, 3.0374738566805513, 3.035321018949465, 3.0332874756764787,
                3.031366972062274, 3.0295535513491445, 3.0278415432774857, 3.0262255527294077, 3.0247004485877214,
                3.02326135283381, 3.021903629903695, 3.0206228763178493, 3.0194149105969794, 3.018275763473071,
                3.0172016684023664, 3.016189052384679, 3.015234527091425, 3.0143348803030103, 3.013487067654679,
                3.0126882046886108, 3.011935559208923, 3.0112265439352606, 3.0105587094498296, 3.00992973743205,
                3.0093374341744266, 3.008779724372767, 3.008254645183512, 3.0077603405406435, 3.007295055724426};

        Matrix A = new Matrix(new double[][]{
                {-2.0, -1.0},
                {1.0, 0.0}
        });
        Matrix B = new Matrix(new double[][]{
                {1.0},
                {0.0}
        });
        Matrix C = new Matrix(new double[][]{
                {1.0, 2.0}
        });
        Matrix D = new Matrix(new double[][]{
                {1.0}
        });

        StateSpace ss = new StateSpace(A, B, C, D);
        StepResponse sr = ss.step(timePoints, new double[]{1.0, 1.0});

        assertArrayEquals(timePoints, sr.getTime(), 1e-12);
        assertArrayEquals(yOut, sr.getResponse(), 1e-12);
    }

    @Test
    public void testTimeResponse() {
        double[] timePoints = NumArrays.linSpace(0.0, 15.0, 50);

        double[][] yOut = {
                {
                        0.5, 0.5953183651284722, 0.6466006894702705, 0.6678400703382454, 0.6698741971149202,
                        0.6603517271890003, 0.6443907578129624, 0.6252901540553092, 0.605107621477758,
                        0.5850810907482419, 0.565919422326563, 0.5479966196261058, 0.5314789160089058,
                        0.5164067084348589, 0.5027467403495963, 0.490424948793618, 0.4793468674583856,
                        0.46941008368454124, 0.4605116581220423, 0.4525523756703662, 0.4454390219550386,
                        0.43908544511906605, 0.4334128840366918, 0.42834986593368696, 0.4238318628798132,
                        0.41980082448268374, 0.41620465842136234, 0.41299670163470775, 0.4101352068950031,
                        0.4075828582364826, 0.40530632177284037, 0.4032758342356342, 0.40146482908330694,
                        0.3998495986242253, 0.39840898985800316, 0.39712413140877456, 0.3959781888388464,
                        0.3949561456888452, 0.39404460772721456, 0.3932316280682728, 0.3925065510100283,
                        0.39185987263630917, 0.3912831164143353, 0.39076872219426406, 0.3903099471794198,
                        0.3899007775842252, 0.38953584983146267, 0.3892103802620367, 0.3889201024397603,
                        0.3886612112318269
                },
                {
                        0.8, 0.9959680194245775, 1.1180304088529802, 1.1976399808454654, 1.251860778141964,
                        1.2903232256449435, 1.3186623815694913, 1.3402822921893738, 1.357297410991361,
                        1.3710543066850405, 1.3824308549397892, 1.3920128997166337, 1.400201072633966,
                        1.4072766134118206, 1.413442543124373, 1.4188497429727276, 1.423613656729683,
                        1.4278251048341055, 1.4315573681370581, 1.434870890584421, 1.437816451146913, 1.440437344143818,
                        1.442770911554792, 1.4448496473217785, 1.4467020151955503, 1.4483530717162212,
                        1.4498249539947368, 1.4511372715039312, 1.4523074279304307, 1.453350890640713,
                        1.4542814197960112, 1.4551112655413885, 1.4558513393116876, 1.4565113637052485,
                        1.4571000042965705, 1.4576249860129151, 1.4580931961725725, 1.458510775900445,
                        1.4588832013520632, 1.459215355959247, 1.459511594739158, 1.4597758015701556,
                        1.4600114402237927, 1.4602215998464878, 1.4604090355027548, 1.4605762043214523,
                        1.4607252977252627, 1.4608582701699495, 1.4609768647727284, 1.4610826361673501
                },
                {
                        0.0, 0.3768099867897473, 0.6863499079918728, 0.9454290628988934, 1.1656265007098252,
                        1.3550692931438462, 1.519592551454485, 1.6634947673206493, 1.7900301234411655,
                        1.901730500864768, 2.0006173966147127, 2.0883426581566686, 2.166283101943194,
                        2.2356051451027166, 2.297309827059671, 2.352264903733963, 2.4012283271341985,
                        2.444865903280223, 2.483764946175455, 2.5184451190681996, 2.5493672509785434,
                        2.5769406561086714, 2.6015293149407173, 2.6234571657244707, 2.643012682676774,
                        2.660452869131305, 2.676006761501208, 2.6898785177445728, 2.702250148523617, 2.7132839381525855,
                        2.723124594273006, 2.731901159030218, 2.7397287097347185, 2.746709873170971, 2.7529361745965293,
                        2.75848923987553, 2.763441866989991, 2.7678589812844008, 2.771798487162919, 2.775312027529688,
                        2.7784456610077894, 2.7812404658655017, 2.7837330785991843, 2.7859561742537426,
                        2.7879388947903143, 2.789707231124991, 2.791284363851997, 2.792690967121211, 2.7939454796556493,
                        2.795064346463005
                }
        };

        double[][] xOut = {
                {
                        0.0, 0.5267501056774089, 0.8911770818821702, 1.1590796544772357, 1.365918534205994,
                        1.5317851824549613, 1.6686504913182425, 1.7840029764980359, 1.8827485503050496,
                        1.9682438649699665, 2.0428809638186713, 2.108430190272375, 2.166247799361379, 2.217405201691893,
                        2.262771458575312, 2.303067196651333, 2.3389006875050913, 2.370792598589974, 2.399193429237348,
                        2.4244961451581477, 2.4470456050280265, 2.467145800903668, 2.4850655748413084,
                        2.5010432462655547, 2.5152904391162414, 2.527995304172768, 2.5393252712442638,
                        2.549429426190113, 2.5584405814564626, 2.5664770911914636, 2.573644449984233, 2.580036705909967,
                        2.5857377126062113, 2.590822240748619, 2.5953569660187803, 2.59940134812399, 2.6030084134179314,
                        2.6062254520359174, 2.6090946391006846, 2.6116535884082, 2.613935846021406, 2.6159713303505994,
                        2.617786724558402, 2.6194058264773092, 2.620849860654884, 2.6221377566350195,
                        2.6232863971346068, 2.6243108393761725, 2.6252245124825135, 2.626039393523876
                },
                {
                        0.0, -0.20211086962342162, -0.32889631386336166, -0.3996892365060543, -0.4323415453884835,
                        -0.4405064292273744, -0.4337714263251338, -0.41854458564292707, -0.3989630982031438,
                        -0.377619511041247, -0.3560871013639848, -0.3352809174120865, -0.31569850947057754,
                        -0.29757733820404664, -0.28099627369443214, -0.2659403062241015, -0.2523413616687342,
                        -0.2401037387679958, -0.2291197219678109, -0.21927895957920024, -0.21047391314685263,
                        -0.20260285207856113, -0.19557133183800582, -0.18929275041799393, -0.1836883581766988,
                        -0.17868695610503604, -0.17422442857353693, -0.1702432001764153, -0.16669167064897839,
                        -0.16352365943234318, -0.16069787747343223, -0.15817743520084823, -0.15592939034684092,
                        -0.15392433614324025, -0.15213602861078043, -0.15054105068252802, -0.14911851043380478,
                        -0.14784977053137532, -0.14671820603692043, -0.14570898782466493, -0.14480888905134864,
                        -0.14400611231848906, -0.14329013537407825, -0.14265157340302537, -0.14208205614705283,
                        -0.1415741182725264, -0.14112110156775962, -0.14071706769963965, -0.14035672039352584,
                        -0.140035336021149
                },
                {
                        0.0, 0.05737069683238586, 0.17847467461410368, 0.32004547914781684, 0.46296575579321514,
                        0.5990148742468686, 0.7249495534960456, 0.8398213876615431, 0.9437392762381387,
                        1.0372866477238163, 1.1212412835542942, 1.1964383907993745, 1.2637033872638288,
                        1.323819606671644, 1.3775139649761974, 1.4254520431843278, 1.4682381337598152,
                        1.5064178569945665, 1.5404820286186314, 1.5708710411923388, 1.597979346183877,
                        1.6221598092021452, 1.643727818823111, 1.6629650927531003, 1.6801231620853614,
                        1.6954265356983425, 1.7090755586540611, 1.721248984534999, 1.7321062842948607,
                        1.7417897147968897, 1.7504261696387573, 1.7581288336478993, 1.7649986609011352,
                        1.7711256944739477, 1.7765902444738706, 1.7814639393248946, 1.7858106637805597,
                        1.7896873957684243, 1.7931449529124563, 1.7962286584405966, 1.7989789351564598,
                        1.8014318352293535, 1.8036195127270385, 1.8055706450724858, 1.8073108089410659,
                        1.80886281552038, 1.8102470095241712, 1.8114815358778316, 1.8125825775700264, 1.8135645677874759
                }
        };

        Matrix A = new Matrix(new double[][]{
                {-1.5, -0.2, 1.0},
                {-0.2, -1.7, 0.6},
                {1.0, 0.6, -1.4}
        });
        Matrix B = new Matrix(new double[][]{
                {1.5, 0.6},
                {-1.8, 1.0},
                {0.0, 0.0}
        });
        Matrix C = new Matrix(new double[][]{
                {-0.0, -0.5, -0.1},
                {0.35, -0.1, -0.15},
                {0.65, 0.0, 0.6}
        });
        Matrix D = new Matrix(new double[][]{
                {0.5, 0.0},
                {0.05, 0.75},
                {0.0, 0.0}
        });
        double[][] U = new double[2][timePoints.length];
        for (int i = 0; i < 2; ++i) {
            U[i] = NumArrays.ones(timePoints.length);
        }
        StateSpace ss = new StateSpace(A, B, C, D);
        TimeResponse tr = ss.simulateTimeResponse(U, timePoints);

        assertArrayEquals(timePoints, tr.getTime(), 1e-12);

        assertArrayEquals(yOut[0], tr.getResponse()[0], 1e-12);
        assertArrayEquals(yOut[1], tr.getResponse()[1], 1e-12);
        assertArrayEquals(yOut[2], tr.getResponse()[2], 1e-12);

        double[][] transposedStateVector = NumArrays.transpose(tr.getEvolutionOfStateVector());

        assertArrayEquals(xOut[0], transposedStateVector[0], 1e-12);
        assertArrayEquals(xOut[1], transposedStateVector[1], 1e-12);
        assertArrayEquals(xOut[2], transposedStateVector[2], 1e-12);
    }

    @Test
    public void testTimeResponseWithInitialConditions() {
        double[] timePoints = NumArrays.linSpace(0.0, 15.0, 50);

        double[][] yOut = {
                {
                        -0.09999999999999998, 0.1475669073583783, 0.2958775696086321, 0.3829884132114232,
                        0.4323341415622912, 0.4584622108718057, 0.47044447347923524, 0.4739470138880556,
                        0.4725042802362672, 0.4683115920606241, 0.4627216286154614, 0.45655694627395005,
                        0.4503072653841159, 0.44425419528319504, 0.4385501043038984, 0.43326794790157225,
                        0.4284326813059116, 0.4240409904859573, 0.4200736156005774, 0.41650298246988493,
                        0.4132978680158711, 0.41042619655433504, 0.40785666364082307, 0.4055596295119106,
                        0.4035075621003818, 0.4016752064964783, 0.4000395921685505, 0.39857994761225896,
                        0.3972775656831, 0.39611564614855144, 0.39507913144707363, 0.39415454501441444,
                        0.39332983740147187, 0.3925942428504823, 0.39193814743702504, 0.391352968954946,
                        0.39083104818509967, 0.3903655508978484, 0.3899503797991886, 0.3895800955816391,
                        0.3892498462461486, 0.3889553038968458, 0.3886926082619384, 0.38845831625260263,
                        0.38824935693194196, 0.38806299132495947, 0.38789677655625054, 0.3877485338539506,
                        0.3876163200060232, 0.38749840189823326
                },
                {
                        0.9, 1.0700634640061049, 1.1849075662583552, 1.2622720173161839, 1.3146109187886474,
                        1.3503737665436248, 1.375181761057326, 1.3927327486773518, 1.4054450865687769,
                        1.4148971343018433, 1.4221200986370748, 1.4277903230750528, 1.4323544090078297,
                        1.4361101798870861, 1.4392589050243327, 1.4419389351975997, 1.4442473635944921,
                        1.4462539907028895, 1.4480103488990967, 1.4495555566293927, 1.4509201369494453,
                        1.4521285272918896, 1.4532007459051643, 1.4541535130645484, 1.4550010181159587,
                        1.4557554549656433, 1.4564274048581378, 1.4570261172839305, 1.4575597219326282,
                        1.458035393118562, 1.4584594807299487, 1.458837617006146, 1.459174805382783,
                        1.459475495656674, 1.45974364842503, 1.4599827908997347, 1.4601960656294983,
                        1.4603862732795823, 1.4605559103558323, 1.4607072025754286, 1.4608421344544074,
                        1.4609624755843909, 1.4610698039969254, 1.4611655269561197, 1.4612508994740883,
                        1.4613270408059207, 1.4613949491493279, 1.461455514747354, 1.461509531569554, 1.461557707727063
                },
                {
                        1.25, 1.522170965883771, 1.7271630127746378, 1.8859372565096988, 2.012213092158766,
                        2.115061408028354, 2.2005570682824427, 2.27283424051709, 2.3347618584034158, 2.388377040528968,
                        2.4351640605780407, 2.476234624499639, 2.512444984387167, 2.5444725516273055,
                        2.5728664776077776, 2.5980814477884397, 2.620500604353136, 2.6404513873784983,
                        2.6582167274762813, 2.674043155836904, 2.6881468431355353, 2.7007182237693383,
                        2.711925634257758, 2.7219182483555624, 2.7308284971510512, 2.7387741014188087,
                        2.7458598038102764, 2.752178862459683, 2.7578143503777133, 2.76284029348025, 2.767322672256992,
                        2.7713203066442054, 2.774885639804783, 2.7780654337073853, 2.780901387292319,
                        2.7834306863923666, 2.785686493296514, 2.787698382807355, 2.7894927307846333,
                        2.7910930604444664, 2.792520351066199, 2.793793313225332, 2.7949286342062054,
                        2.7959411968406336, 2.796844274659796, 2.797649705929425, 2.7983680488572427,
                        2.7990087200120226, 2.799580117771865, 2.8000897324218785
                }
        };

        double[][] xOut = {
                {
                        1.0, 1.3657462651461723, 1.629780723472598, 1.8219913213942287, 1.9642585951319291,
                        2.071873608370948, 2.155273815597979, 2.221509197986642, 2.2753330387278714, 2.31996572089167,
                        2.3576121956656526, 2.389805981246556, 2.4176353871950274, 2.4418914642099083,
                        2.4631645928256125, 2.4819076250691623, 2.498477334349384, 2.5131618197712173,
                        2.5261988116784564, 2.5377880690663734, 2.5480999239911113, 2.5572812967016216,
                        2.565460035177278, 2.57274813101366, 2.5792441699394435, 2.5850352508803183,
                        2.5901985275042194, 2.594802474623586, 2.598907948477785, 2.60256908823682,
                        2.6058340918768397, 2.6087458902061273, 2.6113427365572663, 2.6136587254122468,
                        2.615724250290582, 2.617566409155365, 2.6192093640884, 2.6206746608657507, 2.621981513207467,
                        2.6231470558004792, 2.6241865696492783, 2.625113682860123, 2.6259405495875363,
                        2.6266780095505666, 2.6273357302492135, 2.627922333770399, 2.628445509861759,
                        2.6289121167657092, 2.6293282711421124, 2.6296994282624584
                },
                {
                        1.0, 0.4933875541036571, 0.18564301327691946, 1.4220770933698335E-4, -0.10981661823225308,
                        -0.17303894260602415, -0.20743197633972243, -0.22417844838470205, -0.23027368821596758,
                        -0.23008962477104222, -0.22634863502937827, -0.22073413811102593, -0.2142751916716981,
                        -0.20758942386334503, -0.20103670603150664, -0.19481639296763917, -0.18902880828716867,
                        -0.1837140491476503, -0.17887639782958306, -0.1744996019210236, -0.17055636687884645,
                        -0.16701418674643154, -0.16383886441248866, -0.1609965800893822, -0.15845505309756788,
                        -0.1561841424418238, -0.15415610464794557, -0.15234564654263533, -0.15072985932191774,
                        -0.14928808767254195, -0.14800176707316254, -0.1468542493655699, -0.1458306284837971,
                        -0.14491757309743944, -0.14410316974186368, -0.14337677805701837, -0.14272889858321722,
                        -0.14215105287723573, -0.1416356753316372, -0.14117601588799647, -0.1407660527570198,
                        -0.14040041424910896, -0.14007430884864588, -0.13978346271612713, -0.13952406386315303,
                        -0.13929271230947424, -0.13908637559486747, -0.13890234907933835, -0.138738220521877,
                        -0.13859183848022663
                },
                {
                        1.0, 1.0573931558979317, 1.1130092375290817, 1.1694048293390835, 1.2257416755383534,
                        1.280572604312063, 1.3327151469062601, 1.3814221030429543, 1.4263256387171654, 1.46733220324897,
                        1.5045268889922772, 1.5381012278156292, 1.5683033045173314, 1.5954051664847748,
                        1.619682487118549, 1.6414024858224734, 1.660817228376727, 1.6781603408786785,
                        1.6936458331421413, 1.7074681849062687, 1.7198031542355214, 1.7308089681888073,
                        1.7406276856542122, 1.749386605327805, 1.7571996444840214, 1.7641686472443359
                        , 1.7703846015542226, 1.775928756590587, 1.7808736397785887, 1.785283976877195,
                        1.7892175208950767, 1.792725796683705, 1.7958547684042665, 1.7986454369823746,
                        1.801134374339068, 1.803354200735632, 1.8053340110650895, 1.8070997554076946,
                        1.8086745786662997, 1.8100791236235916, 1.8113318013236128, 1.812449032277087,
                        1.8134454616238451, 1.8143341510546094, 1.8151267499963453, 1.8158336482977762,
                        1.8164641124118317, 1.8170264068571857, 1.8175279025491533, 1.8179751734188005
                }
        };

        Matrix A = new Matrix(new double[][]{
                {-1.5, -0.2, 1.0},
                {-0.2, -1.7, 0.6},
                {1.0, 0.6, -1.4}
        });
        Matrix B = new Matrix(new double[][]{
                {1.5, 0.6},
                {-1.8, 1.0},
                {0.0, 0.0}
        });
        Matrix C = new Matrix(new double[][]{
                {-0.0, -0.5, -0.1},
                {0.35, -0.1, -0.15},
                {0.65, 0.0, 0.6}
        });
        Matrix D = new Matrix(new double[][]{
                {0.5, 0.0},
                {0.05, 0.75},
                {0.0, 0.0}
        });
        double[][] U = new double[2][timePoints.length];
        for (int i = 0; i < 2; ++i) {
            U[i] = NumArrays.ones(timePoints.length);
        }
        StateSpace ss = new StateSpace(A, B, C, D);
        double[] initialConditions = {1, 1, 1};
        TimeResponse tr = ss.simulateTimeResponse(U, timePoints, initialConditions);

        assertArrayEquals(timePoints, tr.getTime(), 1e-12);
        assertArrayEquals(yOut[0], tr.getResponse()[0], 1e-12);
        assertArrayEquals(yOut[1], tr.getResponse()[1], 1e-12);
        assertArrayEquals(yOut[2], tr.getResponse()[2], 1e-12);

        double[][] transposedStateVector = NumArrays.transpose(tr.getEvolutionOfStateVector());

        assertArrayEquals(xOut[0], transposedStateVector[0], 1e-12);
        assertArrayEquals(xOut[1], transposedStateVector[1], 1e-12);
        assertArrayEquals(xOut[2], transposedStateVector[2], 1e-12);
    }

    @Test
    public void testEvaluateAt() {
        double[][] A = {{-2, -1}, {1, 0}};
        double[][] B = {{1}, {0}};
        double[][] C = {{1, 2}};
        double[][] D = {{1}};

        StateSpace ss = new StateSpace(A, B, C, D);
        Complex[] out = ss.evaluateAt(100);
        assertEquals(1.0000000199960006, out[0].real(), 1e-12);
        assertEquals(-0.010000999700049994, out[0].imag(), 1e-12);

        A = new double[][]{{-2, -1, 3}, {1, 0, 5}, {4, 5, 10}};
        B = new double[][]{{1, 2, 4}, {0, 6, 7}, {9, 10, 22}};
        C = new double[][]{{1, 2, 0}, {0, 1, 0}, {0, 0, 1}};
        D = new double[][]{{0, 0, 1}, {2, 3, 4}, {5, 6, 7}};

        ss = new StateSpace(A, B, C, D);
        Complex[] result = {new Complex(-0.011542373908342127, -0.008843720085419242),
                new Complex(1.9954643232641387, 4.86878158958262E-4),
                new Complex(4.990756640908159, -0.08875003943655803),
                new Complex(-0.012186972440090565, -0.1382853147258124),
                new Complex(2.9948877925087123, -0.0593012177526939),
                new Complex(5.986416866545381, -0.09830757398167314),
                new Complex(0.9725318695647737, -0.17664584358826158),
                new Complex(3.988777297177795, -0.06861654835210704),
                new Complex(6.973335512000304, -0.21657150706728753)};
        assertArrayEquals(result, ss.evaluateAt(100));
    }

    @Test
    public void testToTransferFunction() {
        double[][] A = {{-2, -1}, {1, 0}};
        double[][] B = {{1}, {0}};
        double[][] C = {{1, 2}};
        double[][] D = {{1}};

        StateSpace ss = new StateSpace(A, B, C, D);
        TransferFunction tf = ss.toTransferFunction();
        double[] numerator = {1.0, 3.0, 3.0};
        double[] denominator = {1.0, 2.0, 1.0};

        assertArrayEquals(numerator, tf.getNumerator().getCoefficients(), 1e-12);
        assertArrayEquals(denominator, tf.getDenominator().getCoefficients(), 1e-12);

        A = new double[][]{{-1}};
        B = new double[][]{{1}};
        C = new double[][]{{1}};
        D = new double[][]{{0}};

        ss = new StateSpace(A, B, C, D);
        tf = ss.toTransferFunction();
        numerator = new double[]{0.0, 1.0};
        denominator = new double[]{1.0, 1.0};

        assertArrayEquals(numerator, tf.getNumeratorCoefficients(), 1e-12);
        assertArrayEquals(denominator, tf.getDenominatorCoefficients(), 1e-12);

        A = new double[][]{{-2, -1, 3}, {1, 0, 5}, {4, 5, 10}};
        B = new double[][]{{1, 2, 4}, {0, 6, 7}, {9, 10, 22}};
        C = new double[][]{{1, 2, 0}, {0, 1, 0}, {0, 0, 1}};
        D = new double[][]{{0, 0, 1}, {2, 3, 4}, {5, 6, 7}};

        double[][] numerators = {{0.0, 0.999999999999992, 108.99999999999994, 183.9999999999999},
                {2.0, -15.99999999999999, -66.00000000000003, 17.00000000000005},
                {5.0, -30.999999999999947, -258.00000000000006, -261.0000000000002},
                {0.0, 13.999999999999993, 12.00000000000005, -34.00000000000008},
                {3.0, -17.99999999999998, -164.00000000000006, -207.00000000000014},
                {6.0, -37.999999999999936, -278.0000000000001, -274.00000000000034},
                {1.0, 9.999999999999996, 78.99999999999993, 113.9999999999997},
                {4.0, -24.999999999999957, -166.00000000000006, -118.0000000000003},
                {7.0, -33.99999999999993, -297.0000000000001, -301.0000000000004}};
        denominator = new double[]{1.0, -7.999999999999987, -56.00000000000002, -55.000000000000064};

        ss = new StateSpace(A, B, C, D);
        for (int i = 0; i < 3; ++i) {
            TransferFunction[] tfs = ss.toTransferFunction(i);
            for (int j = 0; j < tfs.length; ++j) {
                assertArrayEquals(numerators[3 * i + j], tfs[j].getNumeratorCoefficients(), 1e-12);
                assertArrayEquals(denominator, tfs[j].getDenominatorCoefficients(), 1e-12);
            }
        }
    }
}
